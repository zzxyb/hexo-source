{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/recent-comments.js","path":"js/recent-comments.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wsm/wsm.drawio.svg","path":"img/wsm/wsm.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/drm-commit.drawio.svg","path":"img/treeland/drm-commit.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/input-device-init-hotplug.drawio.svg","path":"img/treeland/input-device-init-hotplug.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/keyboard_key.drawio.svg","path":"img/treeland/keyboard_key.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/main.drawio.svg","path":"img/treeland/main.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/monitor-init-hotplug.drawio.svg","path":"img/treeland/monitor-init-hotplug.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/pointer-motion.drawio.svg","path":"img/treeland/pointer-motion.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/surface-init.drawio.svg","path":"img/treeland/surface-init.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/surface-update.drawio.svg","path":"img/treeland/surface-update.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/treeland/wlrc-qpa-rhi.drawio.svg","path":"img/treeland/wlrc-qpa-rhi.drawio.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wlroots/wlroots.drawio.svg","path":"img/wlroots/wlroots.drawio.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/lychee.md","hash":"87714544ac0e3d9a121653ca83bf7d6cfb5763e7","modified":1692065852304},{"_id":"source/_posts/xdg desktop portal.md","hash":"da861cd802984e26441a8e8c32ff3ef24822f614","modified":1690560965682},{"_id":"source/about/index.md","hash":"53d01dcf37e6d40f268c74a82e4954a5e5801225","modified":1690546668808},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1690197206027},{"_id":"themes/maupassant/_config.yml","hash":"d13e94a64d76e2b47f17cf6d149f0b5d4cf234de","modified":1698907879346},{"_id":"themes/maupassant/package.json","hash":"362d7747a66bc94aae04d13e3a9f0766792d9fce","modified":1719246871689},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1690197206027},{"_id":"themes/maupassant/languages/en.yml","hash":"27d8484ce29989317624e9852c5495289fe5501c","modified":1690197206027},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1690197206027},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1690197206027},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1690197206027},{"_id":"themes/maupassant/languages/nb-NO.yml","hash":"dfef2a8f7582f9bccf7cf8376fb2b96c1e452d5f","modified":1690197206027},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1690197206027},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"433484ab11838cc8540aceaf13eb718fa180ed9c","modified":1690197206027},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"58905c7fa82ee4f2232bcd00301dfcd7b711c61e","modified":1690197206027},{"_id":"themes/maupassant/layout/archive.pug","hash":"9bf5245929529576b5d6678142276adf3c221a6d","modified":1690197206027},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"6b1ff15ae71223ef2cae1a56e40d2354cf40ff31","modified":1690197206027},{"_id":"themes/maupassant/layout/base.pug","hash":"ebfbb48e5f4b6810d5ea0b9e1bb252196ff698e8","modified":1690197206027},{"_id":"themes/maupassant/layout/blogroll.pug","hash":"31106223b01f45ab0b9747f91db104b0f0d1d4cc","modified":1690197206027},{"_id":"themes/maupassant/layout/index.pug","hash":"3e71a8b314b57a3e8b9f1d275c482361025afb23","modified":1690197206027},{"_id":"themes/maupassant/layout/page.pug","hash":"9b72086ff877de064f804a59684140af09470484","modified":1690197206027},{"_id":"themes/maupassant/layout/post.pug","hash":"f69362f8bffcccf696f793b6084cdec773b85cc1","modified":1690197206027},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1690197206027},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"5c06b2a267070bd866b911cc894f314e97dfe2b4","modified":1690197206027},{"_id":"themes/maupassant/layout/timeline.pug","hash":"cef82a79f57e4e491f2934d990da939c4bebceb6","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"21fdb56fc42c5a250c04e92f49eb12ebcf0e2f3e","modified":1690197206027},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"f06418de0ea6ed314148da19c5ac3e8c8199640d","modified":1690546622094},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"82567449d68025cc7fee5259d4769f5ee015aa26","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"12d4aa97403f0bc5135e924b0b33251b0a1ad51d","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"f91a71eb8a1af225a4f0f7749fedf534cc0ceae0","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"a21ffd35f129244729ad64128cafe4781447c96d","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1690197206027},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"7dde69ef8f86745b83ba5f03c75717a782752f2b","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"f2e9f6ff02b858b507f61768753b54846491f87a","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"17e68ea3e87f128819d16ec30cd506a51fe80a7f","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"859eddafd2762072bc5af850038ff377578b0ce4","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/info.pug","hash":"82359802de5a4e3d80ec9a3737b071fd5c3be221","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"3f6048423887f359bb97d17621e961495d209a7c","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"e63c9f0a770324a03146fc263f3000c7cdc59631","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"5a86fcd97933c665b5afef701d8b30cfd2952691","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"a141293ce93b312f4db9f28207d02ee578ede359","modified":1690197206027},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"9b73975ac67b471ae91803b8477932d2c5e5a4f2","modified":1690197206027},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1690197206027},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1690197206027},{"_id":"themes/maupassant/source/css/donate.scss","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1690197206027},{"_id":"themes/maupassant/source/css/search.scss","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1690197206027},{"_id":"themes/maupassant/source/css/style.scss","hash":"388b9d5d850c042da2997d17c90a99fb83cb0150","modified":1690197206027},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"badf3f916cfdaf4ac5ee7471e8176325125b435f","modified":1690546622094},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1690197206027},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1690197206031},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1690197206031},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1690197206031},{"_id":"themes/maupassant/source/img/avatar.jpeg","hash":"0729deb28e37d375c61549a482359430a08c9230","modified":1690197206027},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1690197206031},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"cb195eb6177a2167f1f15c340272c1569c185b14","modified":1690197206031},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1690197206031},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1690197206027},{"_id":"themes/maupassant/source/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1690197206031},{"_id":"themes/maupassant/source/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1690197206031},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1690197206027},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1690197206031},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1690197206031},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1690197206031},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1690197206027},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1690197206031},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1690197206027},{"_id":"themes/maupassant/source/img/lychee/Lychee-wallpaper.svg","hash":"9d0dda3532d6bbb8dda4184fe3d652e5ef288156","modified":1690546622094},{"_id":"themes/maupassant/source/img/lychee/lychee.svg","hash":"ebfcafd8748a08ab63d88fd9adbcc7e0890cf4b1","modified":1690546622094},{"_id":"themes/maupassant/source/img/lychee/wlroots.svg","hash":"c00141584701ebe8211b109998b13d015fbc70fd","modified":1690546622094},{"_id":"themes/maupassant/source/img/lychee/wsm.svg","hash":"76ef000dbdcd048f1c77757f8e79d0e3f3dfbf11","modified":1690546622094},{"_id":"themes/maupassant/source/img/xdg-desktop-portal/xdg_desktop_portal.svg","hash":"714fa4a21933a76f7b128406b86bbdd6358d3585","modified":1719242689553},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"fe6972813f6364d05713661bd5864508251e70c2","modified":1690546622094},{"_id":"themes/maupassant/source/img/test/6.jpg","hash":"a99867eaa9f28e14ddccba16b1b51a4357ebc117","modified":1690197206031},{"_id":"public/about/index.html","hash":"ae58030db67280163da9c22948e1d62d9915bf03","modified":1698909936100},{"_id":"public/2023/07/27/lychee/index.html","hash":"d8e80eb2d4796bfda3aba264eb683d91b98ed421","modified":1698909936100},{"_id":"public/archives/index.html","hash":"5035ca182da28324aeaa54f49c0a4ae853c40537","modified":1698909936100},{"_id":"public/archives/2023/index.html","hash":"5035ca182da28324aeaa54f49c0a4ae853c40537","modified":1698909936100},{"_id":"public/archives/2023/07/index.html","hash":"5035ca182da28324aeaa54f49c0a4ae853c40537","modified":1698909936100},{"_id":"public/categories/Linux/index.html","hash":"ea7d77e60d1bec61b85e0b7f5ef464d2ce0ff266","modified":1698909936100},{"_id":"public/index.html","hash":"0296234cd0ef6233585522d7856156fe6f0f2ce3","modified":1698909936100},{"_id":"public/tags/linux-Desktop-Environment/index.html","hash":"f31ea4b586f9c871fda240c071f721aeba06f106","modified":1698909936100},{"_id":"public/tags/linux-xdg/index.html","hash":"19bd9888caa9a2af3de22c7fba57680dc5f2d8a0","modified":1698909936100},{"_id":"public/2023/07/24/xdg desktop portal/index.html","hash":"37393e355066baa37b6dff8588d3710bd088785d","modified":1698909936100},{"_id":"public/img/WeChatQR.png","hash":"badf3f916cfdaf4ac5ee7471e8176325125b435f","modified":1690561021634},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1690561021634},{"_id":"public/img/avatar.jpeg","hash":"0729deb28e37d375c61549a482359430a08c9230","modified":1690561021634},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1690561021634},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1690561021634},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1690561021634},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1690561021634},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1690561021634},{"_id":"public/img/lychee/Lychee-wallpaper.svg","hash":"9d0dda3532d6bbb8dda4184fe3d652e5ef288156","modified":1690561021634},{"_id":"public/img/lychee/lychee.svg","hash":"ebfcafd8748a08ab63d88fd9adbcc7e0890cf4b1","modified":1690561021634},{"_id":"public/img/lychee/wlroots.svg","hash":"c00141584701ebe8211b109998b13d015fbc70fd","modified":1690561021634},{"_id":"public/img/lychee/wsm.svg","hash":"76ef000dbdcd048f1c77757f8e79d0e3f3dfbf11","modified":1690561021634},{"_id":"public/img/xdg-desktop-portal/xdg_desktop_portal.svg","hash":"5521acce9e35ba2c18e76d0d2e211f9dca96f667","modified":1690561021634},{"_id":"public/img/AliPayQR.png","hash":"fe6972813f6364d05713661bd5864508251e70c2","modified":1690561021634},{"_id":"public/css/copycode.css","hash":"803d8bf898f47c3929665eb7af97da22f11efacd","modified":1690561021634},{"_id":"public/css/copyright.css","hash":"e857156bd1f971fe6abdc22d2b8c82e495387438","modified":1690561021634},{"_id":"public/css/donate.css","hash":"d631def20dfb661439c506f28dc791f331d506f8","modified":1690561021634},{"_id":"public/css/search.css","hash":"0d0f73b357c3bc5077ef657c73f679b22bea93fb","modified":1690561021634},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1690561021634},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1690561021634},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1690561021634},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1690561021634},{"_id":"public/js/fancybox.js","hash":"cb195eb6177a2167f1f15c340272c1569c185b14","modified":1690561021634},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1690561021634},{"_id":"public/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1690561021634},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1690561021634},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1690561021634},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1690561021634},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1690561021634},{"_id":"public/css/style.css","hash":"b8bd7e1fcd5abf50d3c11028d1da3b6f0b4cf5c8","modified":1690561021634},{"_id":"public/img/test/6.jpg","hash":"a99867eaa9f28e14ddccba16b1b51a4357ebc117","modified":1690561021634},{"_id":"source/rss/index.md","hash":"aa8301c7c0c03bfefb63144c84d8411f127a9062","modified":1719321172876},{"_id":"public/rss/index.html","hash":"63a1db342f5ee4532471334f5c98c358d09ee568","modified":1698915521736},{"_id":"public/categories/Linux-Lychee桌面/index.html","hash":"79582a599994152aa05b68f90b2c6c29687ace2d","modified":1698909936100},{"_id":"source/_posts/wsm.md","hash":"72b74e75027f8ae60222bbbaca081060a9c97d8c","modified":1719241864391},{"_id":"themes/maupassant/source/img/wsm/wlroots.svg","hash":"c00141584701ebe8211b109998b13d015fbc70fd","modified":1719246633747},{"_id":"themes/maupassant/db.json","hash":"847054ec81efa9ab43d94aea8c068b0884a990d0","modified":1719246876379},{"_id":"themes/maupassant/source/img/wsm/wsm.drawio.svg","hash":"80535bd876360d43888ac2f82b31a4ff0413b047","modified":1719246633751},{"_id":"source/_posts/drm-commit.md","hash":"61ff16ebecf124c6960f8a1ba448b9fe074903d2","modified":1719322182626},{"_id":"source/_posts/inputdevice-init-hotplug.md","hash":"0ab61586d17ee40c34ae252ce367bfa7f085fb64","modified":1719322027049},{"_id":"source/_posts/keyboard-event.md","hash":"4b30057ea22ac22517b7cae6d6a02828ad2e5cd2","modified":1719245222228},{"_id":"source/_posts/monitor-init-hotplug.md","hash":"64a152f68c306adf6927722d32209a0fb419fc1c","modified":1719319355478},{"_id":"source/_posts/pointer-event.md","hash":"9066bed4b29c21208965e2beae3f01accb2a6644","modified":1719245222228},{"_id":"source/_posts/qwlroots.md","hash":"4226d0d8a3df482f81379079f7451d8655325f6c","modified":1719245222228},{"_id":"source/_posts/surface-init-update.md","hash":"c049ba383df429e67c88023d38f1711675a9f4ab","modified":1719322113287},{"_id":"source/_posts/treeland-index.md","hash":"e5bdf816fed2d8daa68e000f631c5b756064b530","modified":1719320992690},{"_id":"source/_posts/treeland-init.md","hash":"dec0bb169442db7f401196719d6187acd11e0b07","modified":1719315154551},{"_id":"source/_posts/treeland.md","hash":"888bc20bebf63149d7e4a0cc663f488853ed7965","modified":1719245222228},{"_id":"source/_posts/waylib.md","hash":"58bddf3e2450ef39ca5179bd77a9462c4b7bfd84","modified":1719245222228},{"_id":"source/_posts/wl-qpa-bridge.md","hash":"d6004605447dc48e60813c0b62ab01bb0dcc1f74","modified":1719316903068},{"_id":"source/_posts/wlroots.md","hash":"19c243e5bca3d20d9a32a0b2d84acb568ac0848d","modified":1719294273556},{"_id":"themes/maupassant/source/img/treeland/main.drawio.svg","hash":"68f11835c17252959187fdae0bad25b483864028","modified":1719246633727},{"_id":"themes/maupassant/source/img/treeland/drm-commit.drawio.svg","hash":"6877ae5ed814652f64315dcdd12f41061be4465f","modified":1719246633717},{"_id":"themes/maupassant/source/img/treeland/surface-init.drawio.svg","hash":"72ccf654c6e915542f75bb16b6e05189b402ba5c","modified":1719246633741},{"_id":"themes/maupassant/source/img/treeland/surface-update.drawio.svg","hash":"874a5d4dba64b776f7520a2fb3d060d54132cc68","modified":1719246633741},{"_id":"themes/maupassant/source/img/treeland/keyboard_key.drawio.svg","hash":"bda9193c32b910f85eedb2c5b695d0bffa595405","modified":1719246633727},{"_id":"themes/maupassant/source/img/treeland/wlrc-qpa-rhi.drawio.svg","hash":"7b8eba117dc63642207b9a85a07d1835f81eb54f","modified":1719246633747},{"_id":"themes/maupassant/source/img/treeland/pointer-motion.drawio.svg","hash":"afb18e9fcafb5864f0bce1a4cba24eb0fd9a8346","modified":1719246633737},{"_id":"themes/maupassant/source/img/treeland/monitor-init-hotplug.drawio.svg","hash":"baf4c5ac541623118033b597bfb6835d97aea24f","modified":1719246633734},{"_id":"themes/maupassant/source/img/treeland/input-device-init-hotplug.drawio.svg","hash":"55b2e932db17b19182f189ac888c2659a5b04065","modified":1719246633721},{"_id":"themes/maupassant/source/img/wlroots/wlroots.svg","hash":"c00141584701ebe8211b109998b13d015fbc70fd","modified":1719246633747},{"_id":"themes/maupassant/source/img/wlroots/wlroots.drawio.svg","hash":"8e951d4120b62e79700b54da054005f0588c80be","modified":1719294247723},{"_id":"source/_posts/event.md","hash":"e4c6f13ea65025503077657393b0f4030a572129","modified":1719318364182},{"_id":"source/_posts/wsm-dev-advice.md","hash":"ca44f0b5f43428160e9dc7c4a6e9b6e09d3b03ca","modified":1719649556741}],"Category":[{"name":"Linux","_id":"clkmsdt590003ezsb5w2r6xih"},{"name":"Linux-Lychee桌面","_id":"clogv40ra0001e7ai5y0tdcfw"},{"name":"wsm","_id":"clxt4rbu70001yjsbdg4ucur1"},{"name":"treeland","_id":"clxtz99e10002m5sba4ibdig2"},{"name":"wlroots","_id":"clxtz99e80010m5sb16t587km"}],"Data":[],"Page":[{"comments":0,"date":"2023-07-28T06:04:08.000Z","_content":"\n# 关于我\n欢迎来到我的个人博客！我是zzxyb，喜欢分享关于Linux、Wayland、Xorg、Linux Desktop Environment、QT的知识和经验。在这个博客中，你将找到关于Linux的各种有趣的内容。如果你对我的博客有任何问题或建议，请随时联系我。谢谢你的访问！\n\n## 我是谁？\n我是个热爱技术的开发者，致力于创建有趣、实用的项目和解决方案。\n\n## 我的愿景\n我的愿景是打造一个美好的操作系统，为Linux发展带来积极的影响。\n\n## 我的使命\n我的使命是通过创造性的编程和开源协作，推动科技进步。\n\n## 联系我\n- 电子邮件：xiaoyaobing1994@gmail.com\n- GitHub：[zzxyb主页](https://github.com/zzxyb)\n- 网站：[云烟成雨 -博客](https://zzxyb.github.io/)\n- 推特：[推特主页](https://twitter.com/zzxyba)\n- 组织机构：[deepin](https://github.com/linuxdeepin)\n- 居住地：中华人民共和国 湖北省 武汉市\n\n感谢您对我的支持！\n","source":"about/index.md","raw":"---\ncomments: false\ndate: 2023-07-28 14:04:08\n---\n\n# 关于我\n欢迎来到我的个人博客！我是zzxyb，喜欢分享关于Linux、Wayland、Xorg、Linux Desktop Environment、QT的知识和经验。在这个博客中，你将找到关于Linux的各种有趣的内容。如果你对我的博客有任何问题或建议，请随时联系我。谢谢你的访问！\n\n## 我是谁？\n我是个热爱技术的开发者，致力于创建有趣、实用的项目和解决方案。\n\n## 我的愿景\n我的愿景是打造一个美好的操作系统，为Linux发展带来积极的影响。\n\n## 我的使命\n我的使命是通过创造性的编程和开源协作，推动科技进步。\n\n## 联系我\n- 电子邮件：xiaoyaobing1994@gmail.com\n- GitHub：[zzxyb主页](https://github.com/zzxyb)\n- 网站：[云烟成雨 -博客](https://zzxyb.github.io/)\n- 推特：[推特主页](https://twitter.com/zzxyba)\n- 组织机构：[deepin](https://github.com/linuxdeepin)\n- 居住地：中华人民共和国 湖北省 武汉市\n\n感谢您对我的支持！\n","updated":"2023-07-28T12:17:48.808Z","path":"about/index.html","title":"","layout":"page","_id":"clkmsdt4p0000ezsb5ruj5nrb","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>欢迎来到我的个人博客！我是zzxyb，喜欢分享关于Linux、Wayland、Xorg、Linux Desktop Environment、QT的知识和经验。在这个博客中，你将找到关于Linux的各种有趣的内容。如果你对我的博客有任何问题或建议，请随时联系我。谢谢你的访问！</p>\n<h2 id=\"我是谁？\"><a href=\"#我是谁？\" class=\"headerlink\" title=\"我是谁？\"></a>我是谁？</h2><p>我是个热爱技术的开发者，致力于创建有趣、实用的项目和解决方案。</p>\n<h2 id=\"我的愿景\"><a href=\"#我的愿景\" class=\"headerlink\" title=\"我的愿景\"></a>我的愿景</h2><p>我的愿景是打造一个美好的操作系统，为Linux发展带来积极的影响。</p>\n<h2 id=\"我的使命\"><a href=\"#我的使命\" class=\"headerlink\" title=\"我的使命\"></a>我的使命</h2><p>我的使命是通过创造性的编程和开源协作，推动科技进步。</p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><ul>\n<li>电子邮件：<a href=\"mailto:&#x78;&#105;&#x61;&#111;&#121;&#x61;&#111;&#98;&#x69;&#110;&#x67;&#x31;&#57;&#57;&#52;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#x78;&#105;&#x61;&#111;&#121;&#x61;&#111;&#98;&#x69;&#110;&#x67;&#x31;&#57;&#57;&#52;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></li>\n<li>GitHub：<a href=\"https://github.com/zzxyb\">zzxyb主页</a></li>\n<li>网站：<a href=\"https://zzxyb.github.io/\">云烟成雨 -博客</a></li>\n<li>推特：<a href=\"https://twitter.com/zzxyba\">推特主页</a></li>\n<li>组织机构：<a href=\"https://github.com/linuxdeepin\">deepin</a></li>\n<li>居住地：中华人民共和国 湖北省 武汉市</li>\n</ul>\n<p>感谢您对我的支持！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>欢迎来到我的个人博客！我是zzxyb，喜欢分享关于Linux、Wayland、Xorg、Linux Desktop Environment、QT的知识和经验。在这个博客中，你将找到关于Linux的各种有趣的内容。如果你对我的博客有任何问题或建议，请随时联系我。谢谢你的访问！</p>\n<h2 id=\"我是谁？\"><a href=\"#我是谁？\" class=\"headerlink\" title=\"我是谁？\"></a>我是谁？</h2><p>我是个热爱技术的开发者，致力于创建有趣、实用的项目和解决方案。</p>\n<h2 id=\"我的愿景\"><a href=\"#我的愿景\" class=\"headerlink\" title=\"我的愿景\"></a>我的愿景</h2><p>我的愿景是打造一个美好的操作系统，为Linux发展带来积极的影响。</p>\n<h2 id=\"我的使命\"><a href=\"#我的使命\" class=\"headerlink\" title=\"我的使命\"></a>我的使命</h2><p>我的使命是通过创造性的编程和开源协作，推动科技进步。</p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><ul>\n<li>电子邮件：<a href=\"mailto:&#x78;&#105;&#x61;&#111;&#121;&#x61;&#111;&#98;&#x69;&#110;&#x67;&#x31;&#57;&#57;&#52;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#x78;&#105;&#x61;&#111;&#121;&#x61;&#111;&#98;&#x69;&#110;&#x67;&#x31;&#57;&#57;&#52;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></li>\n<li>GitHub：<a href=\"https://github.com/zzxyb\">zzxyb主页</a></li>\n<li>网站：<a href=\"https://zzxyb.github.io/\">云烟成雨 -博客</a></li>\n<li>推特：<a href=\"https://twitter.com/zzxyba\">推特主页</a></li>\n<li>组织机构：<a href=\"https://github.com/linuxdeepin\">deepin</a></li>\n<li>居住地：中华人民共和国 湖北省 武汉市</li>\n</ul>\n<p>感谢您对我的支持！</p>\n"},{"comments":0,"date":"2023-11-02T06:04:08.000Z","_content":"\n# 项目导航\n\n| 项目       | 描述  |\n| ---------- | ----- |\n| [<span style=\"color: blue;\">wsm</span>](https://github.com/zzxyb/wsm) | 一个使基于wlroots写的wayland合成器，Lychee桌面环境默认的合成器 |\n| [<span style=\"color: blue;\">wlscenegraph</span>](https://github.com/zzxyb/wlscenegraph) | Wayland场景渲染库，为wsm提供开箱即用图形渲染和动画等功能 |\n| [<span style=\"color: blue;\">wsmwayland</span>](https://github.com/zzxyb/wsmwayland) | 基于wsm的全量协议，提供一个Qt、qml风格的Wayland协议客户端封装 |\n| [<span style=\"color: blue;\">lychee-qt6-plugins</span>](https://github.com/zzxyb/lychee-qt6-plugins) | lychee桌面环境下qt的QPA插件 |\n| lychee-workspaces | 一个集session管理、桌面UI、电源管理为一体的项目，暂未开源，如果有兴趣可以联系我 |\n| [<span style=\"color: blue;\">lychee-wallpaper</span>](https://github.com/zzxyb/lychee-wallpaper) | lychee桌面环境壁纸引擎项目，提供各类壁纸渲染后端 |\n| [<span style=\"color: blue;\">lychee-declarative</span>](https://github.com/zzxyb/lychee-declarative) | qtquick和qml控件封装库，基于qtquick实现的个性化UI开发包 |\n| [<span style=\"color: blue;\">lychee-draw</span>](https://github.com/zzxyb/lychee-draw) | lychee绘图应用，占个位置，暂无开发计划 |\n| [<span style=\"color: blue;\">lychee-settings</span>](https://github.com/zzxyb/lychee-settings) | lychee设置应用，集中系统各控制功能于一体 |\n| [<span style=\"color: blue;\">lychee-recorder</span>](https://github.com/zzxyb/lychee-recorder) | lychee录音笔应用 |\n| [<span style=\"color: blue;\">lychee-file-manager</span>](https://github.com/zzxyb/lychee-file-manager) | lychee文件管理器 |\n| [<span style=\"color: blue;\">lychee-camera</span>](https://github.com/zzxyb/lychee-camera) | lychee相机拍摄招聘和录制视频 |\n| [<span style=\"color: blue;\">lychee-clock</span>](https://github.com/zzxyb/lychee-clock) | 时钟lychee mobile上使用 |\n| [<span style=\"color: blue;\">lychee-weather</span>](https://github.com/zzxyb/lychee-weather) | lychee天气应用 |\n| [<span style=\"color: blue;\">lychee-calendar</span>](https://github.com/zzxyb/lychee-calendar) | lychee日历应用 |\n| [<span style=\"color: blue;\">lychee-calculator</span>](https://github.com/zzxyb/lychee-calendar) | lychee计算器应用 |\n| [<span style=\"color: blue;\">lychee-music</span>](https://github.com/zzxyb/lychee-music) | lychee音乐应用 |\n| [<span style=\"color: blue;\">lychee-video</span>](https://github.com/zzxyb/lychee-video) | lychee影视应用 |\n| [<span style=\"color: blue;\">lychee-screen-grab</span>](https://github.com/zzxyb/lychee-screen-grab) | lychee截图录屏应用 |\n| [<span style=\"color: blue;\">lychee-text-editor</span>](https://github.com/zzxyb/lychee-text-editor) | lychee文本编辑器应用 |\n| [<span style=\"color: blue;\">lychee-book</span>](https://github.com/zzxyb/lychee-book) | lychee图书应用 |\n| [<span style=\"color: blue;\">lychee-image-viewer</span>](https://github.com/zzxyb/lychee-image-viewer) | lychee图片应用 |\n| [<span style=\"color: blue;\">lychee-terminal</span>](https://github.com/zzxyb/lychee-terminal) | lychee终端应用 |\n| [<span style=\"color: blue;\">lychee-remote-assistance</span>](https://github.com/zzxyb/lychee-remote-assistance) | lychee远程协助应用 |\n\n感谢您的一键三连！\n","source":"rss/index.md","raw":"---\ncomments: false\ndate: 2023-11-02 14:04:08\n---\n\n# 项目导航\n\n| 项目       | 描述  |\n| ---------- | ----- |\n| [<span style=\"color: blue;\">wsm</span>](https://github.com/zzxyb/wsm) | 一个使基于wlroots写的wayland合成器，Lychee桌面环境默认的合成器 |\n| [<span style=\"color: blue;\">wlscenegraph</span>](https://github.com/zzxyb/wlscenegraph) | Wayland场景渲染库，为wsm提供开箱即用图形渲染和动画等功能 |\n| [<span style=\"color: blue;\">wsmwayland</span>](https://github.com/zzxyb/wsmwayland) | 基于wsm的全量协议，提供一个Qt、qml风格的Wayland协议客户端封装 |\n| [<span style=\"color: blue;\">lychee-qt6-plugins</span>](https://github.com/zzxyb/lychee-qt6-plugins) | lychee桌面环境下qt的QPA插件 |\n| lychee-workspaces | 一个集session管理、桌面UI、电源管理为一体的项目，暂未开源，如果有兴趣可以联系我 |\n| [<span style=\"color: blue;\">lychee-wallpaper</span>](https://github.com/zzxyb/lychee-wallpaper) | lychee桌面环境壁纸引擎项目，提供各类壁纸渲染后端 |\n| [<span style=\"color: blue;\">lychee-declarative</span>](https://github.com/zzxyb/lychee-declarative) | qtquick和qml控件封装库，基于qtquick实现的个性化UI开发包 |\n| [<span style=\"color: blue;\">lychee-draw</span>](https://github.com/zzxyb/lychee-draw) | lychee绘图应用，占个位置，暂无开发计划 |\n| [<span style=\"color: blue;\">lychee-settings</span>](https://github.com/zzxyb/lychee-settings) | lychee设置应用，集中系统各控制功能于一体 |\n| [<span style=\"color: blue;\">lychee-recorder</span>](https://github.com/zzxyb/lychee-recorder) | lychee录音笔应用 |\n| [<span style=\"color: blue;\">lychee-file-manager</span>](https://github.com/zzxyb/lychee-file-manager) | lychee文件管理器 |\n| [<span style=\"color: blue;\">lychee-camera</span>](https://github.com/zzxyb/lychee-camera) | lychee相机拍摄招聘和录制视频 |\n| [<span style=\"color: blue;\">lychee-clock</span>](https://github.com/zzxyb/lychee-clock) | 时钟lychee mobile上使用 |\n| [<span style=\"color: blue;\">lychee-weather</span>](https://github.com/zzxyb/lychee-weather) | lychee天气应用 |\n| [<span style=\"color: blue;\">lychee-calendar</span>](https://github.com/zzxyb/lychee-calendar) | lychee日历应用 |\n| [<span style=\"color: blue;\">lychee-calculator</span>](https://github.com/zzxyb/lychee-calendar) | lychee计算器应用 |\n| [<span style=\"color: blue;\">lychee-music</span>](https://github.com/zzxyb/lychee-music) | lychee音乐应用 |\n| [<span style=\"color: blue;\">lychee-video</span>](https://github.com/zzxyb/lychee-video) | lychee影视应用 |\n| [<span style=\"color: blue;\">lychee-screen-grab</span>](https://github.com/zzxyb/lychee-screen-grab) | lychee截图录屏应用 |\n| [<span style=\"color: blue;\">lychee-text-editor</span>](https://github.com/zzxyb/lychee-text-editor) | lychee文本编辑器应用 |\n| [<span style=\"color: blue;\">lychee-book</span>](https://github.com/zzxyb/lychee-book) | lychee图书应用 |\n| [<span style=\"color: blue;\">lychee-image-viewer</span>](https://github.com/zzxyb/lychee-image-viewer) | lychee图片应用 |\n| [<span style=\"color: blue;\">lychee-terminal</span>](https://github.com/zzxyb/lychee-terminal) | lychee终端应用 |\n| [<span style=\"color: blue;\">lychee-remote-assistance</span>](https://github.com/zzxyb/lychee-remote-assistance) | lychee远程协助应用 |\n\n感谢您的一键三连！\n","updated":"2024-06-25T13:12:52.876Z","path":"rss/index.html","_id":"clogv40r70000e7aidpyh1hsp","title":"","layout":"page","content":"<h1 id=\"项目导航\"><a href=\"#项目导航\" class=\"headerlink\" title=\"项目导航\"></a>项目导航</h1><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/zzxyb/wsm\"><span style=\"color: blue;\">wsm</span></a></td>\n<td>一个使基于wlroots写的wayland合成器，Lychee桌面环境默认的合成器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/wlscenegraph\"><span style=\"color: blue;\">wlscenegraph</span></a></td>\n<td>Wayland场景渲染库，为wsm提供开箱即用图形渲染和动画等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/wsmwayland\"><span style=\"color: blue;\">wsmwayland</span></a></td>\n<td>基于wsm的全量协议，提供一个Qt、qml风格的Wayland协议客户端封装</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-qt6-plugins\"><span style=\"color: blue;\">lychee-qt6-plugins</span></a></td>\n<td>lychee桌面环境下qt的QPA插件</td>\n</tr>\n<tr>\n<td>lychee-workspaces</td>\n<td>一个集session管理、桌面UI、电源管理为一体的项目，暂未开源，如果有兴趣可以联系我</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-wallpaper\"><span style=\"color: blue;\">lychee-wallpaper</span></a></td>\n<td>lychee桌面环境壁纸引擎项目，提供各类壁纸渲染后端</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-declarative\"><span style=\"color: blue;\">lychee-declarative</span></a></td>\n<td>qtquick和qml控件封装库，基于qtquick实现的个性化UI开发包</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-draw\"><span style=\"color: blue;\">lychee-draw</span></a></td>\n<td>lychee绘图应用，占个位置，暂无开发计划</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-settings\"><span style=\"color: blue;\">lychee-settings</span></a></td>\n<td>lychee设置应用，集中系统各控制功能于一体</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-recorder\"><span style=\"color: blue;\">lychee-recorder</span></a></td>\n<td>lychee录音笔应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-file-manager\"><span style=\"color: blue;\">lychee-file-manager</span></a></td>\n<td>lychee文件管理器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-camera\"><span style=\"color: blue;\">lychee-camera</span></a></td>\n<td>lychee相机拍摄招聘和录制视频</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-clock\"><span style=\"color: blue;\">lychee-clock</span></a></td>\n<td>时钟lychee mobile上使用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-weather\"><span style=\"color: blue;\">lychee-weather</span></a></td>\n<td>lychee天气应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-calendar\"><span style=\"color: blue;\">lychee-calendar</span></a></td>\n<td>lychee日历应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-calendar\"><span style=\"color: blue;\">lychee-calculator</span></a></td>\n<td>lychee计算器应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-music\"><span style=\"color: blue;\">lychee-music</span></a></td>\n<td>lychee音乐应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-video\"><span style=\"color: blue;\">lychee-video</span></a></td>\n<td>lychee影视应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-screen-grab\"><span style=\"color: blue;\">lychee-screen-grab</span></a></td>\n<td>lychee截图录屏应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-text-editor\"><span style=\"color: blue;\">lychee-text-editor</span></a></td>\n<td>lychee文本编辑器应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-book\"><span style=\"color: blue;\">lychee-book</span></a></td>\n<td>lychee图书应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-image-viewer\"><span style=\"color: blue;\">lychee-image-viewer</span></a></td>\n<td>lychee图片应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-terminal\"><span style=\"color: blue;\">lychee-terminal</span></a></td>\n<td>lychee终端应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-remote-assistance\"><span style=\"color: blue;\">lychee-remote-assistance</span></a></td>\n<td>lychee远程协助应用</td>\n</tr>\n</tbody></table>\n<p>感谢您的一键三连！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"项目导航\"><a href=\"#项目导航\" class=\"headerlink\" title=\"项目导航\"></a>项目导航</h1><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/zzxyb/wsm\"><span style=\"color: blue;\">wsm</span></a></td>\n<td>一个使基于wlroots写的wayland合成器，Lychee桌面环境默认的合成器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/wlscenegraph\"><span style=\"color: blue;\">wlscenegraph</span></a></td>\n<td>Wayland场景渲染库，为wsm提供开箱即用图形渲染和动画等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/wsmwayland\"><span style=\"color: blue;\">wsmwayland</span></a></td>\n<td>基于wsm的全量协议，提供一个Qt、qml风格的Wayland协议客户端封装</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-qt6-plugins\"><span style=\"color: blue;\">lychee-qt6-plugins</span></a></td>\n<td>lychee桌面环境下qt的QPA插件</td>\n</tr>\n<tr>\n<td>lychee-workspaces</td>\n<td>一个集session管理、桌面UI、电源管理为一体的项目，暂未开源，如果有兴趣可以联系我</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-wallpaper\"><span style=\"color: blue;\">lychee-wallpaper</span></a></td>\n<td>lychee桌面环境壁纸引擎项目，提供各类壁纸渲染后端</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-declarative\"><span style=\"color: blue;\">lychee-declarative</span></a></td>\n<td>qtquick和qml控件封装库，基于qtquick实现的个性化UI开发包</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-draw\"><span style=\"color: blue;\">lychee-draw</span></a></td>\n<td>lychee绘图应用，占个位置，暂无开发计划</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-settings\"><span style=\"color: blue;\">lychee-settings</span></a></td>\n<td>lychee设置应用，集中系统各控制功能于一体</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-recorder\"><span style=\"color: blue;\">lychee-recorder</span></a></td>\n<td>lychee录音笔应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-file-manager\"><span style=\"color: blue;\">lychee-file-manager</span></a></td>\n<td>lychee文件管理器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-camera\"><span style=\"color: blue;\">lychee-camera</span></a></td>\n<td>lychee相机拍摄招聘和录制视频</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-clock\"><span style=\"color: blue;\">lychee-clock</span></a></td>\n<td>时钟lychee mobile上使用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-weather\"><span style=\"color: blue;\">lychee-weather</span></a></td>\n<td>lychee天气应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-calendar\"><span style=\"color: blue;\">lychee-calendar</span></a></td>\n<td>lychee日历应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-calendar\"><span style=\"color: blue;\">lychee-calculator</span></a></td>\n<td>lychee计算器应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-music\"><span style=\"color: blue;\">lychee-music</span></a></td>\n<td>lychee音乐应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-video\"><span style=\"color: blue;\">lychee-video</span></a></td>\n<td>lychee影视应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-screen-grab\"><span style=\"color: blue;\">lychee-screen-grab</span></a></td>\n<td>lychee截图录屏应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-text-editor\"><span style=\"color: blue;\">lychee-text-editor</span></a></td>\n<td>lychee文本编辑器应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-book\"><span style=\"color: blue;\">lychee-book</span></a></td>\n<td>lychee图书应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-image-viewer\"><span style=\"color: blue;\">lychee-image-viewer</span></a></td>\n<td>lychee图片应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-terminal\"><span style=\"color: blue;\">lychee-terminal</span></a></td>\n<td>lychee终端应用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zzxyb/lychee-remote-assistance\"><span style=\"color: blue;\">lychee-remote-assistance</span></a></td>\n<td>lychee远程协助应用</td>\n</tr>\n</tbody></table>\n<p>感谢您的一键三连！</p>\n"}],"Post":[{"title":"wsm简介","date":"2024-06-23T08:07:25.000Z","comments":1,"toc":true,"_content":"\n## 什么是 wsm？\n&nbsp;&nbsp;&nbsp;&nbsp;为什么要开发 wsm 项目？Wayland 世界中有多种合成器，其中较为知名的有 Weston、Kwin 和 Mutter。Weston 作为 Wayland 的参考合成器实现，虽然轻量，但并不适合用于构建功能强大的 PC 合成器；Kwin 和 Mutter 则由于历史原因，与 Plasma 和 GNOME 桌面环境有着深度的设计和功能绑定，在其基础上开发必然会引入许多其他桌面组件。在这样的背景下，笔者思考是否能够开发出一款功能强大且干净整洁的合成器，供各个桌面环境使用？wsm 正是在这种背景下应运而生。\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 是一个基于 [wlroots](https://gitlab.freedesktop.org/wlroots/wlroots) 技术打造的高效且轻巧的 Wayland 合成器，用于 Wayland 显示服务器协议的窗口管理器和桌面环境服务器。\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 旨在统一 Wayland PC 生态系统中的合成器，力图像 Xserver 一样，经过时间的沉淀，打造一个统一且稳定的 Wayland 合成器。\n\n## 核心功能\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 提供了一套用于处理显示服务器输入、输出和窗口管理的基础功能。其核心功能包括：\n- 窗口录制支持：能够录制窗口图像，包括标题栏，实现所见即所得的效果。\n- 输入处理：支持各种输入设备（如键盘、鼠标、触摸屏、触控板等）的处理。\n- 渲染支持：支持硬件加速渲染（OpenGLES、Vulkan）和软件渲染（Cairo）。\n- 窗口和屏幕后处理特效：支持圆角、模糊、阴影和状态切换动画等。\n- 多工作区支持：支持单个屏幕多个工作区的管理功能。\n- 屏幕亮度调节：支持屏幕背光调光功能。\n- 屏幕水印：支持在合成器层面渲染屏幕水印节点。\n- 输入、输出配置和肌肉记忆：支持 wsm 作为唯一显示后端，记录硬件相关的配置参数。\n- 窗口平铺功能：支持窗口在屏幕上的停靠布局，屏幕二分、三分、四分屏等。\n- 动画线支持：提供高效的动画渲染机制。\n- 统一调试机制：支持场景渲染、DRM 输出、窗口管理、设备输入等核心功能的调试协议。\n- 多DRM 平面支持：充分使用 DRM 显示资源，提升渲染性能。 \n\n## 设计哲学\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使调用者可以根据需求选择使用 Wayland 协议调用这些模块。\n\n## 主要组件\n- wsm_server：核心服务器。\n- wsm_output*：屏幕管理。\n- wsm_scene：渲染场景管理。\n- wsm_node*：自定义的渲染节点，用于在场景中显示图像。\n- wsm_xdg_shell：XDG窗口管理。\n- wsm_layer_shell：控制窗口层级和显示位置，通过用于管理桌面组件。\n- wsm_xwayland*: Xwayland窗口管理\n- wsm_workspace*：工作区\n\n## 使用场景\n- wsm 主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：\n- 自定义窗口管理器：开发者可以基于 wsm 已有的基础功能快速构建具有自定义功能的窗口管理器。\n- 桌面环境：为新的桌面环境提供图形显示和窗口管理的基础支持。\n- 嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。\n- 实验性项目：研究和实验新的窗口管理和显示技术。\n\n## 基础框架\n![1.1 wsm基础框架图](/img/wsm/wsm.drawio.svg)\n\n## 结语\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 作为一个强大且现代的 Wayland 合成器，虽然目前仍处于开发阶段，但笔者相信，只要按照现有的计划不断迭代功能，它终将成为一个稳定、高效的 Wayland 合成器。这样一来，操作系统厂商就能够在其基础上轻松地构建高效、定制化的解决方案，使其成为众多桌面环境的首选合成器基础。笔者在开发 wsm 项目的过程中始终遵循两点原则：：\n- 与其为自己建一座桥，不如建一座坚固的大桥，让众人都能通行，而无需重复造桥。感谢 wlroots 项目为我的想法提供了非常强大的技术基础。\n- 我们应该充实和发展 wlroots 的生态，使 Wayland 走向使用同一个合成器。合成器承上启下，不需要重复实现，而是要奠定一个稳定且功能全面的版本，从而推动 Linux 驱动的改进和发展。\n\n&nbsp;&nbsp;&nbsp;&nbsp;更多信息和详细文档可以访问 [wsm 的Github 页面](https://github.com/zzxyb/wsm)。","source":"_posts/wsm.md","raw":"---\ntitle: wsm简介\ndate: 2024/06/23 16:07:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - wsm\n---\n\n## 什么是 wsm？\n&nbsp;&nbsp;&nbsp;&nbsp;为什么要开发 wsm 项目？Wayland 世界中有多种合成器，其中较为知名的有 Weston、Kwin 和 Mutter。Weston 作为 Wayland 的参考合成器实现，虽然轻量，但并不适合用于构建功能强大的 PC 合成器；Kwin 和 Mutter 则由于历史原因，与 Plasma 和 GNOME 桌面环境有着深度的设计和功能绑定，在其基础上开发必然会引入许多其他桌面组件。在这样的背景下，笔者思考是否能够开发出一款功能强大且干净整洁的合成器，供各个桌面环境使用？wsm 正是在这种背景下应运而生。\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 是一个基于 [wlroots](https://gitlab.freedesktop.org/wlroots/wlroots) 技术打造的高效且轻巧的 Wayland 合成器，用于 Wayland 显示服务器协议的窗口管理器和桌面环境服务器。\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 旨在统一 Wayland PC 生态系统中的合成器，力图像 Xserver 一样，经过时间的沉淀，打造一个统一且稳定的 Wayland 合成器。\n\n## 核心功能\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 提供了一套用于处理显示服务器输入、输出和窗口管理的基础功能。其核心功能包括：\n- 窗口录制支持：能够录制窗口图像，包括标题栏，实现所见即所得的效果。\n- 输入处理：支持各种输入设备（如键盘、鼠标、触摸屏、触控板等）的处理。\n- 渲染支持：支持硬件加速渲染（OpenGLES、Vulkan）和软件渲染（Cairo）。\n- 窗口和屏幕后处理特效：支持圆角、模糊、阴影和状态切换动画等。\n- 多工作区支持：支持单个屏幕多个工作区的管理功能。\n- 屏幕亮度调节：支持屏幕背光调光功能。\n- 屏幕水印：支持在合成器层面渲染屏幕水印节点。\n- 输入、输出配置和肌肉记忆：支持 wsm 作为唯一显示后端，记录硬件相关的配置参数。\n- 窗口平铺功能：支持窗口在屏幕上的停靠布局，屏幕二分、三分、四分屏等。\n- 动画线支持：提供高效的动画渲染机制。\n- 统一调试机制：支持场景渲染、DRM 输出、窗口管理、设备输入等核心功能的调试协议。\n- 多DRM 平面支持：充分使用 DRM 显示资源，提升渲染性能。 \n\n## 设计哲学\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使调用者可以根据需求选择使用 Wayland 协议调用这些模块。\n\n## 主要组件\n- wsm_server：核心服务器。\n- wsm_output*：屏幕管理。\n- wsm_scene：渲染场景管理。\n- wsm_node*：自定义的渲染节点，用于在场景中显示图像。\n- wsm_xdg_shell：XDG窗口管理。\n- wsm_layer_shell：控制窗口层级和显示位置，通过用于管理桌面组件。\n- wsm_xwayland*: Xwayland窗口管理\n- wsm_workspace*：工作区\n\n## 使用场景\n- wsm 主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：\n- 自定义窗口管理器：开发者可以基于 wsm 已有的基础功能快速构建具有自定义功能的窗口管理器。\n- 桌面环境：为新的桌面环境提供图形显示和窗口管理的基础支持。\n- 嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。\n- 实验性项目：研究和实验新的窗口管理和显示技术。\n\n## 基础框架\n![1.1 wsm基础框架图](/img/wsm/wsm.drawio.svg)\n\n## 结语\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 作为一个强大且现代的 Wayland 合成器，虽然目前仍处于开发阶段，但笔者相信，只要按照现有的计划不断迭代功能，它终将成为一个稳定、高效的 Wayland 合成器。这样一来，操作系统厂商就能够在其基础上轻松地构建高效、定制化的解决方案，使其成为众多桌面环境的首选合成器基础。笔者在开发 wsm 项目的过程中始终遵循两点原则：：\n- 与其为自己建一座桥，不如建一座坚固的大桥，让众人都能通行，而无需重复造桥。感谢 wlroots 项目为我的想法提供了非常强大的技术基础。\n- 我们应该充实和发展 wlroots 的生态，使 Wayland 走向使用同一个合成器。合成器承上启下，不需要重复实现，而是要奠定一个稳定且功能全面的版本，从而推动 Linux 驱动的改进和发展。\n\n&nbsp;&nbsp;&nbsp;&nbsp;更多信息和详细文档可以访问 [wsm 的Github 页面](https://github.com/zzxyb/wsm)。","slug":"wsm","published":1,"updated":"2024-06-24T15:11:04.391Z","layout":"post","photos":[],"link":"","_id":"clxt4rbu30000yjsb5ru1hj9x","content":"<h2 id=\"什么是-wsm？\"><a href=\"#什么是-wsm？\" class=\"headerlink\" title=\"什么是 wsm？\"></a>什么是 wsm？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;为什么要开发 wsm 项目？Wayland 世界中有多种合成器，其中较为知名的有 Weston、Kwin 和 Mutter。Weston 作为 Wayland 的参考合成器实现，虽然轻量，但并不适合用于构建功能强大的 PC 合成器；Kwin 和 Mutter 则由于历史原因，与 Plasma 和 GNOME 桌面环境有着深度的设计和功能绑定，在其基础上开发必然会引入许多其他桌面组件。在这样的背景下，笔者思考是否能够开发出一款功能强大且干净整洁的合成器，供各个桌面环境使用？wsm 正是在这种背景下应运而生。<br>&nbsp;&nbsp;&nbsp;&nbsp;wsm 是一个基于 <a href=\"https://gitlab.freedesktop.org/wlroots/wlroots\">wlroots</a> 技术打造的高效且轻巧的 Wayland 合成器，用于 Wayland 显示服务器协议的窗口管理器和桌面环境服务器。<br>&nbsp;&nbsp;&nbsp;&nbsp;wsm 旨在统一 Wayland PC 生态系统中的合成器，力图像 Xserver 一样，经过时间的沉淀，打造一个统一且稳定的 Wayland 合成器。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 提供了一套用于处理显示服务器输入、输出和窗口管理的基础功能。其核心功能包括：</p>\n<ul>\n<li>窗口录制支持：能够录制窗口图像，包括标题栏，实现所见即所得的效果。</li>\n<li>输入处理：支持各种输入设备（如键盘、鼠标、触摸屏、触控板等）的处理。</li>\n<li>渲染支持：支持硬件加速渲染（OpenGLES、Vulkan）和软件渲染（Cairo）。</li>\n<li>窗口和屏幕后处理特效：支持圆角、模糊、阴影和状态切换动画等。</li>\n<li>多工作区支持：支持单个屏幕多个工作区的管理功能。</li>\n<li>屏幕亮度调节：支持屏幕背光调光功能。</li>\n<li>屏幕水印：支持在合成器层面渲染屏幕水印节点。</li>\n<li>输入、输出配置和肌肉记忆：支持 wsm 作为唯一显示后端，记录硬件相关的配置参数。</li>\n<li>窗口平铺功能：支持窗口在屏幕上的停靠布局，屏幕二分、三分、四分屏等。</li>\n<li>动画线支持：提供高效的动画渲染机制。</li>\n<li>统一调试机制：支持场景渲染、DRM 输出、窗口管理、设备输入等核心功能的调试协议。</li>\n<li>多DRM 平面支持：充分使用 DRM 显示资源，提升渲染性能。</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使调用者可以根据需求选择使用 Wayland 协议调用这些模块。</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>wsm_server：核心服务器。</li>\n<li>wsm_output*：屏幕管理。</li>\n<li>wsm_scene：渲染场景管理。</li>\n<li>wsm_node*：自定义的渲染节点，用于在场景中显示图像。</li>\n<li>wsm_xdg_shell：XDG窗口管理。</li>\n<li>wsm_layer_shell：控制窗口层级和显示位置，通过用于管理桌面组件。</li>\n<li>wsm_xwayland*: Xwayland窗口管理</li>\n<li>wsm_workspace*：工作区</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>wsm 主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：</li>\n<li>自定义窗口管理器：开发者可以基于 wsm 已有的基础功能快速构建具有自定义功能的窗口管理器。</li>\n<li>桌面环境：为新的桌面环境提供图形显示和窗口管理的基础支持。</li>\n<li>嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。</li>\n<li>实验性项目：研究和实验新的窗口管理和显示技术。</li>\n</ul>\n<h2 id=\"基础框架\"><a href=\"#基础框架\" class=\"headerlink\" title=\"基础框架\"></a>基础框架</h2><p><img src=\"/img/wsm/wsm.drawio.svg\" alt=\"1.1 wsm基础框架图\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 作为一个强大且现代的 Wayland 合成器，虽然目前仍处于开发阶段，但笔者相信，只要按照现有的计划不断迭代功能，它终将成为一个稳定、高效的 Wayland 合成器。这样一来，操作系统厂商就能够在其基础上轻松地构建高效、定制化的解决方案，使其成为众多桌面环境的首选合成器基础。笔者在开发 wsm 项目的过程中始终遵循两点原则：：</p>\n<ul>\n<li>与其为自己建一座桥，不如建一座坚固的大桥，让众人都能通行，而无需重复造桥。感谢 wlroots 项目为我的想法提供了非常强大的技术基础。</li>\n<li>我们应该充实和发展 wlroots 的生态，使 Wayland 走向使用同一个合成器。合成器承上启下，不需要重复实现，而是要奠定一个稳定且功能全面的版本，从而推动 Linux 驱动的改进和发展。</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;更多信息和详细文档可以访问 <a href=\"https://github.com/zzxyb/wsm\">wsm 的Github 页面</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-wsm？\"><a href=\"#什么是-wsm？\" class=\"headerlink\" title=\"什么是 wsm？\"></a>什么是 wsm？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;为什么要开发 wsm 项目？Wayland 世界中有多种合成器，其中较为知名的有 Weston、Kwin 和 Mutter。Weston 作为 Wayland 的参考合成器实现，虽然轻量，但并不适合用于构建功能强大的 PC 合成器；Kwin 和 Mutter 则由于历史原因，与 Plasma 和 GNOME 桌面环境有着深度的设计和功能绑定，在其基础上开发必然会引入许多其他桌面组件。在这样的背景下，笔者思考是否能够开发出一款功能强大且干净整洁的合成器，供各个桌面环境使用？wsm 正是在这种背景下应运而生。<br>&nbsp;&nbsp;&nbsp;&nbsp;wsm 是一个基于 <a href=\"https://gitlab.freedesktop.org/wlroots/wlroots\">wlroots</a> 技术打造的高效且轻巧的 Wayland 合成器，用于 Wayland 显示服务器协议的窗口管理器和桌面环境服务器。<br>&nbsp;&nbsp;&nbsp;&nbsp;wsm 旨在统一 Wayland PC 生态系统中的合成器，力图像 Xserver 一样，经过时间的沉淀，打造一个统一且稳定的 Wayland 合成器。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 提供了一套用于处理显示服务器输入、输出和窗口管理的基础功能。其核心功能包括：</p>\n<ul>\n<li>窗口录制支持：能够录制窗口图像，包括标题栏，实现所见即所得的效果。</li>\n<li>输入处理：支持各种输入设备（如键盘、鼠标、触摸屏、触控板等）的处理。</li>\n<li>渲染支持：支持硬件加速渲染（OpenGLES、Vulkan）和软件渲染（Cairo）。</li>\n<li>窗口和屏幕后处理特效：支持圆角、模糊、阴影和状态切换动画等。</li>\n<li>多工作区支持：支持单个屏幕多个工作区的管理功能。</li>\n<li>屏幕亮度调节：支持屏幕背光调光功能。</li>\n<li>屏幕水印：支持在合成器层面渲染屏幕水印节点。</li>\n<li>输入、输出配置和肌肉记忆：支持 wsm 作为唯一显示后端，记录硬件相关的配置参数。</li>\n<li>窗口平铺功能：支持窗口在屏幕上的停靠布局，屏幕二分、三分、四分屏等。</li>\n<li>动画线支持：提供高效的动画渲染机制。</li>\n<li>统一调试机制：支持场景渲染、DRM 输出、窗口管理、设备输入等核心功能的调试协议。</li>\n<li>多DRM 平面支持：充分使用 DRM 显示资源，提升渲染性能。</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使调用者可以根据需求选择使用 Wayland 协议调用这些模块。</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>wsm_server：核心服务器。</li>\n<li>wsm_output*：屏幕管理。</li>\n<li>wsm_scene：渲染场景管理。</li>\n<li>wsm_node*：自定义的渲染节点，用于在场景中显示图像。</li>\n<li>wsm_xdg_shell：XDG窗口管理。</li>\n<li>wsm_layer_shell：控制窗口层级和显示位置，通过用于管理桌面组件。</li>\n<li>wsm_xwayland*: Xwayland窗口管理</li>\n<li>wsm_workspace*：工作区</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>wsm 主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：</li>\n<li>自定义窗口管理器：开发者可以基于 wsm 已有的基础功能快速构建具有自定义功能的窗口管理器。</li>\n<li>桌面环境：为新的桌面环境提供图形显示和窗口管理的基础支持。</li>\n<li>嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。</li>\n<li>实验性项目：研究和实验新的窗口管理和显示技术。</li>\n</ul>\n<h2 id=\"基础框架\"><a href=\"#基础框架\" class=\"headerlink\" title=\"基础框架\"></a>基础框架</h2><p><img src=\"/img/wsm/wsm.drawio.svg\" alt=\"1.1 wsm基础框架图\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 作为一个强大且现代的 Wayland 合成器，虽然目前仍处于开发阶段，但笔者相信，只要按照现有的计划不断迭代功能，它终将成为一个稳定、高效的 Wayland 合成器。这样一来，操作系统厂商就能够在其基础上轻松地构建高效、定制化的解决方案，使其成为众多桌面环境的首选合成器基础。笔者在开发 wsm 项目的过程中始终遵循两点原则：：</p>\n<ul>\n<li>与其为自己建一座桥，不如建一座坚固的大桥，让众人都能通行，而无需重复造桥。感谢 wlroots 项目为我的想法提供了非常强大的技术基础。</li>\n<li>我们应该充实和发展 wlroots 的生态，使 Wayland 走向使用同一个合成器。合成器承上启下，不需要重复实现，而是要奠定一个稳定且功能全面的版本，从而推动 Linux 驱动的改进和发展。</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;更多信息和详细文档可以访问 <a href=\"https://github.com/zzxyb/wsm\">wsm 的Github 页面</a>。</p>\n"},{"title":"treeland简介","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 什么是 treeland？\n在讲 treeland 是什么前，先介绍一下现有的 Wayland 合成器类型 \n- 系统合成器： 可用于启动系统、处理多用户切换、可能的控制台终端仿真器等。系统合成器可以从早期启动一直运行到关机。它有效地取代了内核 vt 系统，并可以与系统图形启动设置和多座席支持相结合。\n系统合成器可以承载不同类型的会话合成器，并让我们在多个会话之间切换（快速用户切换或安全/个人桌面切换）。\n- 会话合成器： 会话合成器负责单个用户会话。如果存在系统合成器，会话合成器将嵌套在系统合成器下运行。嵌套是可行的，因为协议是异步的；当涉及嵌套时，往返成本太高。如果不存在系统合成器，会话合成器可以直接在硬件上运行。常见会话合成器有：gnome-shell、kwin、weston。\n- 嵌入合成器： X11允许客户端嵌入来自其他客户端的窗口，或者允许客户端将另一个客户端渲染的像素图内容复制到其窗口中。这通常用于面板中的小程序、浏览器插件等。Wayland 不直接允许这样做，但客户端可以在带外传递 GEM 缓冲区名称，例如，使用 D-Bus 或在面板启动小程序时使用命令行参数。另一种选择是使用嵌套的 Wayland 实例。为此，Wayland 服务器必须是主机应用程序链接到的库。然后，主机应用程序将 Wayland 服务器套接字名称传递给嵌入式应用程序，并需要实现 Wayland 合成器接口。主机应用程序将客户端表面合成为其窗口的一部分，即在网页或面板中。嵌套 Wayland 服务器的好处是它提供了嵌入式客户端需要通知主机有关缓冲区更新的请求以及从主机应用程序转发输入事件的机制。\n\nTreeland 的设计目标是实现多会话合成器，这与现有的 Wayland 合成器有着显著不同。通常，传统的会话合成器会为每个用户创建一个独立的合成器进程，并在用户切换时通过 systemd 相关组件进行切换。而 Treeland 无论有多少用户，其进程始终保持一个，能够在多用户场景下统一管理显示服务器的输入和输出。\n\n## 核心功能\nwaylib 提供了一组与 Qt 、显示管理器密集的功能。其核心功能包括：\n- 多用户支持：在 ddm 项目的加持下，以一个合成器进程统一管理显示服务器的输入和输出\n- Xwayland支持：支持 X11 应用更好地在 Wayland 下工作。\n- 动画/渲染分级：针对不同性能的机器采用不同的渲染、动画策略。\n\n## 使用场景\n- treeland 未来会成为 Deepin V23 默认的 Wayland 合成器\n\n## 结语\ntreeland 作为一个基于 QtQuick、QML 的合成器，它的设计目标是 Muti-Session Compositor，为产品化、个性化定制提供了坚实的技术，其高效的动画和渲染性能可以方便后期的产品迭代和功能更新。\n\n更多信息和详细文档可以访问 [treeland的Github 页面](https://github.com/linuxdeepin/treeland)。","source":"_posts/treeland.md","raw":"---\ntitle: treeland简介\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 什么是 treeland？\n在讲 treeland 是什么前，先介绍一下现有的 Wayland 合成器类型 \n- 系统合成器： 可用于启动系统、处理多用户切换、可能的控制台终端仿真器等。系统合成器可以从早期启动一直运行到关机。它有效地取代了内核 vt 系统，并可以与系统图形启动设置和多座席支持相结合。\n系统合成器可以承载不同类型的会话合成器，并让我们在多个会话之间切换（快速用户切换或安全/个人桌面切换）。\n- 会话合成器： 会话合成器负责单个用户会话。如果存在系统合成器，会话合成器将嵌套在系统合成器下运行。嵌套是可行的，因为协议是异步的；当涉及嵌套时，往返成本太高。如果不存在系统合成器，会话合成器可以直接在硬件上运行。常见会话合成器有：gnome-shell、kwin、weston。\n- 嵌入合成器： X11允许客户端嵌入来自其他客户端的窗口，或者允许客户端将另一个客户端渲染的像素图内容复制到其窗口中。这通常用于面板中的小程序、浏览器插件等。Wayland 不直接允许这样做，但客户端可以在带外传递 GEM 缓冲区名称，例如，使用 D-Bus 或在面板启动小程序时使用命令行参数。另一种选择是使用嵌套的 Wayland 实例。为此，Wayland 服务器必须是主机应用程序链接到的库。然后，主机应用程序将 Wayland 服务器套接字名称传递给嵌入式应用程序，并需要实现 Wayland 合成器接口。主机应用程序将客户端表面合成为其窗口的一部分，即在网页或面板中。嵌套 Wayland 服务器的好处是它提供了嵌入式客户端需要通知主机有关缓冲区更新的请求以及从主机应用程序转发输入事件的机制。\n\nTreeland 的设计目标是实现多会话合成器，这与现有的 Wayland 合成器有着显著不同。通常，传统的会话合成器会为每个用户创建一个独立的合成器进程，并在用户切换时通过 systemd 相关组件进行切换。而 Treeland 无论有多少用户，其进程始终保持一个，能够在多用户场景下统一管理显示服务器的输入和输出。\n\n## 核心功能\nwaylib 提供了一组与 Qt 、显示管理器密集的功能。其核心功能包括：\n- 多用户支持：在 ddm 项目的加持下，以一个合成器进程统一管理显示服务器的输入和输出\n- Xwayland支持：支持 X11 应用更好地在 Wayland 下工作。\n- 动画/渲染分级：针对不同性能的机器采用不同的渲染、动画策略。\n\n## 使用场景\n- treeland 未来会成为 Deepin V23 默认的 Wayland 合成器\n\n## 结语\ntreeland 作为一个基于 QtQuick、QML 的合成器，它的设计目标是 Muti-Session Compositor，为产品化、个性化定制提供了坚实的技术，其高效的动画和渲染性能可以方便后期的产品迭代和功能更新。\n\n更多信息和详细文档可以访问 [treeland的Github 页面](https://github.com/linuxdeepin/treeland)。","slug":"treeland","published":1,"updated":"2024-06-24T16:07:02.228Z","layout":"post","photos":[],"link":"","_id":"clxtz99e6000nm5sb93zo7k01","content":"<h2 id=\"什么是-treeland？\"><a href=\"#什么是-treeland？\" class=\"headerlink\" title=\"什么是 treeland？\"></a>什么是 treeland？</h2><p>在讲 treeland 是什么前，先介绍一下现有的 Wayland 合成器类型 </p>\n<ul>\n<li>系统合成器： 可用于启动系统、处理多用户切换、可能的控制台终端仿真器等。系统合成器可以从早期启动一直运行到关机。它有效地取代了内核 vt 系统，并可以与系统图形启动设置和多座席支持相结合。<br>系统合成器可以承载不同类型的会话合成器，并让我们在多个会话之间切换（快速用户切换或安全&#x2F;个人桌面切换）。</li>\n<li>会话合成器： 会话合成器负责单个用户会话。如果存在系统合成器，会话合成器将嵌套在系统合成器下运行。嵌套是可行的，因为协议是异步的；当涉及嵌套时，往返成本太高。如果不存在系统合成器，会话合成器可以直接在硬件上运行。常见会话合成器有：gnome-shell、kwin、weston。</li>\n<li>嵌入合成器： X11允许客户端嵌入来自其他客户端的窗口，或者允许客户端将另一个客户端渲染的像素图内容复制到其窗口中。这通常用于面板中的小程序、浏览器插件等。Wayland 不直接允许这样做，但客户端可以在带外传递 GEM 缓冲区名称，例如，使用 D-Bus 或在面板启动小程序时使用命令行参数。另一种选择是使用嵌套的 Wayland 实例。为此，Wayland 服务器必须是主机应用程序链接到的库。然后，主机应用程序将 Wayland 服务器套接字名称传递给嵌入式应用程序，并需要实现 Wayland 合成器接口。主机应用程序将客户端表面合成为其窗口的一部分，即在网页或面板中。嵌套 Wayland 服务器的好处是它提供了嵌入式客户端需要通知主机有关缓冲区更新的请求以及从主机应用程序转发输入事件的机制。</li>\n</ul>\n<p>Treeland 的设计目标是实现多会话合成器，这与现有的 Wayland 合成器有着显著不同。通常，传统的会话合成器会为每个用户创建一个独立的合成器进程，并在用户切换时通过 systemd 相关组件进行切换。而 Treeland 无论有多少用户，其进程始终保持一个，能够在多用户场景下统一管理显示服务器的输入和输出。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>waylib 提供了一组与 Qt 、显示管理器密集的功能。其核心功能包括：</p>\n<ul>\n<li>多用户支持：在 ddm 项目的加持下，以一个合成器进程统一管理显示服务器的输入和输出</li>\n<li>Xwayland支持：支持 X11 应用更好地在 Wayland 下工作。</li>\n<li>动画&#x2F;渲染分级：针对不同性能的机器采用不同的渲染、动画策略。</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>treeland 未来会成为 Deepin V23 默认的 Wayland 合成器</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>treeland 作为一个基于 QtQuick、QML 的合成器，它的设计目标是 Muti-Session Compositor，为产品化、个性化定制提供了坚实的技术，其高效的动画和渲染性能可以方便后期的产品迭代和功能更新。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://github.com/linuxdeepin/treeland\">treeland的Github 页面</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-treeland？\"><a href=\"#什么是-treeland？\" class=\"headerlink\" title=\"什么是 treeland？\"></a>什么是 treeland？</h2><p>在讲 treeland 是什么前，先介绍一下现有的 Wayland 合成器类型 </p>\n<ul>\n<li>系统合成器： 可用于启动系统、处理多用户切换、可能的控制台终端仿真器等。系统合成器可以从早期启动一直运行到关机。它有效地取代了内核 vt 系统，并可以与系统图形启动设置和多座席支持相结合。<br>系统合成器可以承载不同类型的会话合成器，并让我们在多个会话之间切换（快速用户切换或安全&#x2F;个人桌面切换）。</li>\n<li>会话合成器： 会话合成器负责单个用户会话。如果存在系统合成器，会话合成器将嵌套在系统合成器下运行。嵌套是可行的，因为协议是异步的；当涉及嵌套时，往返成本太高。如果不存在系统合成器，会话合成器可以直接在硬件上运行。常见会话合成器有：gnome-shell、kwin、weston。</li>\n<li>嵌入合成器： X11允许客户端嵌入来自其他客户端的窗口，或者允许客户端将另一个客户端渲染的像素图内容复制到其窗口中。这通常用于面板中的小程序、浏览器插件等。Wayland 不直接允许这样做，但客户端可以在带外传递 GEM 缓冲区名称，例如，使用 D-Bus 或在面板启动小程序时使用命令行参数。另一种选择是使用嵌套的 Wayland 实例。为此，Wayland 服务器必须是主机应用程序链接到的库。然后，主机应用程序将 Wayland 服务器套接字名称传递给嵌入式应用程序，并需要实现 Wayland 合成器接口。主机应用程序将客户端表面合成为其窗口的一部分，即在网页或面板中。嵌套 Wayland 服务器的好处是它提供了嵌入式客户端需要通知主机有关缓冲区更新的请求以及从主机应用程序转发输入事件的机制。</li>\n</ul>\n<p>Treeland 的设计目标是实现多会话合成器，这与现有的 Wayland 合成器有着显著不同。通常，传统的会话合成器会为每个用户创建一个独立的合成器进程，并在用户切换时通过 systemd 相关组件进行切换。而 Treeland 无论有多少用户，其进程始终保持一个，能够在多用户场景下统一管理显示服务器的输入和输出。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>waylib 提供了一组与 Qt 、显示管理器密集的功能。其核心功能包括：</p>\n<ul>\n<li>多用户支持：在 ddm 项目的加持下，以一个合成器进程统一管理显示服务器的输入和输出</li>\n<li>Xwayland支持：支持 X11 应用更好地在 Wayland 下工作。</li>\n<li>动画&#x2F;渲染分级：针对不同性能的机器采用不同的渲染、动画策略。</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>treeland 未来会成为 Deepin V23 默认的 Wayland 合成器</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>treeland 作为一个基于 QtQuick、QML 的合成器，它的设计目标是 Muti-Session Compositor，为产品化、个性化定制提供了坚实的技术，其高效的动画和渲染性能可以方便后期的产品迭代和功能更新。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://github.com/linuxdeepin/treeland\">treeland的Github 页面</a>。</p>\n"},{"title":"waylib简介","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 什么是 waylib？\nwaylib 是一个功能库，用于将 qwlroots 与 QtQuick 的图形组件混合，利用 Qt 事件、渲染模型制作高级 Wayland 合成器库。\n\n## 核心功能\nwaylib 提供了一组与Qt深入集成的 APi。其核心功能包括：\n- 渲染管理：利用 QtQuick 渲染模型支持 Wayland 合成器中 Surface 显示、后处理特效、动画等功能。\n- 输入处理：使用 Qt 事件模型传递、分发事件。\n- 提供QML组件：方便上层合成器实现调用。\n\n## 设计哲学\nwaylib 的设计哲学是深度绑定 QtQuick、QRHI 技术，实现 OpenGL、Vulkan 多渲染 API 兼容，将 Wayland Surface 附加到 QQcuikItem,将一个或多个 Wayland Output 附加到 QQuickWindow.\n## 主要组件\n- WSurfaceItem：Wayland Surface显示控件抽象层。\n- QWlrootsInterhration：qwlroots 与 Qt 窗口系统连接的 Qt QPA 插件实现。\n- WOutputRenderWindow: Qt 窗口输出与 wlroots 送显中间件，胶合曾。\n- WQuickWaylandServerInterface：Wayland 协议服务侧实现的基类，方便继承其用于实现各个协议并且注册成QML类型\n- WOutputViewport：单个屏幕视口，当WOutputRenderWindow绑定多个屏幕输出时，WOutputViewport用以处理单个Wayland Output 输入、输出。\n\n## 使用场景\n- 想利用 QtQuick 技术开发 Wayland 合成器的场景\n- 需要强大动画效果和UI渲染的 Wayland 合成器场景\n\n## 相关项目\n一些基于 waylib 开发的知名项目包括：\n\n- treeland: 一款使用 QtQuick 等技术打造的多会话合成器。\n\n## 结语\nwaylib 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了开箱即用的 API 和 QML 组件，方便 QtQuick 技术方向的开发者开发 Wayland 合成器。\n\n更多信息和详细文档可以访问 [waylib的Github 页面](https://github.com/vioken/waylib)。","source":"_posts/waylib.md","raw":"---\ntitle: waylib简介\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 什么是 waylib？\nwaylib 是一个功能库，用于将 qwlroots 与 QtQuick 的图形组件混合，利用 Qt 事件、渲染模型制作高级 Wayland 合成器库。\n\n## 核心功能\nwaylib 提供了一组与Qt深入集成的 APi。其核心功能包括：\n- 渲染管理：利用 QtQuick 渲染模型支持 Wayland 合成器中 Surface 显示、后处理特效、动画等功能。\n- 输入处理：使用 Qt 事件模型传递、分发事件。\n- 提供QML组件：方便上层合成器实现调用。\n\n## 设计哲学\nwaylib 的设计哲学是深度绑定 QtQuick、QRHI 技术，实现 OpenGL、Vulkan 多渲染 API 兼容，将 Wayland Surface 附加到 QQcuikItem,将一个或多个 Wayland Output 附加到 QQuickWindow.\n## 主要组件\n- WSurfaceItem：Wayland Surface显示控件抽象层。\n- QWlrootsInterhration：qwlroots 与 Qt 窗口系统连接的 Qt QPA 插件实现。\n- WOutputRenderWindow: Qt 窗口输出与 wlroots 送显中间件，胶合曾。\n- WQuickWaylandServerInterface：Wayland 协议服务侧实现的基类，方便继承其用于实现各个协议并且注册成QML类型\n- WOutputViewport：单个屏幕视口，当WOutputRenderWindow绑定多个屏幕输出时，WOutputViewport用以处理单个Wayland Output 输入、输出。\n\n## 使用场景\n- 想利用 QtQuick 技术开发 Wayland 合成器的场景\n- 需要强大动画效果和UI渲染的 Wayland 合成器场景\n\n## 相关项目\n一些基于 waylib 开发的知名项目包括：\n\n- treeland: 一款使用 QtQuick 等技术打造的多会话合成器。\n\n## 结语\nwaylib 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了开箱即用的 API 和 QML 组件，方便 QtQuick 技术方向的开发者开发 Wayland 合成器。\n\n更多信息和详细文档可以访问 [waylib的Github 页面](https://github.com/vioken/waylib)。","slug":"waylib","published":1,"updated":"2024-06-24T16:07:02.228Z","layout":"post","photos":[],"link":"","_id":"clxtz99e7000qm5sbeur96ae0","content":"<h2 id=\"什么是-waylib？\"><a href=\"#什么是-waylib？\" class=\"headerlink\" title=\"什么是 waylib？\"></a>什么是 waylib？</h2><p>waylib 是一个功能库，用于将 qwlroots 与 QtQuick 的图形组件混合，利用 Qt 事件、渲染模型制作高级 Wayland 合成器库。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>waylib 提供了一组与Qt深入集成的 APi。其核心功能包括：</p>\n<ul>\n<li>渲染管理：利用 QtQuick 渲染模型支持 Wayland 合成器中 Surface 显示、后处理特效、动画等功能。</li>\n<li>输入处理：使用 Qt 事件模型传递、分发事件。</li>\n<li>提供QML组件：方便上层合成器实现调用。</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>waylib 的设计哲学是深度绑定 QtQuick、QRHI 技术，实现 OpenGL、Vulkan 多渲染 API 兼容，将 Wayland Surface 附加到 QQcuikItem,将一个或多个 Wayland Output 附加到 QQuickWindow.</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>WSurfaceItem：Wayland Surface显示控件抽象层。</li>\n<li>QWlrootsInterhration：qwlroots 与 Qt 窗口系统连接的 Qt QPA 插件实现。</li>\n<li>WOutputRenderWindow: Qt 窗口输出与 wlroots 送显中间件，胶合曾。</li>\n<li>WQuickWaylandServerInterface：Wayland 协议服务侧实现的基类，方便继承其用于实现各个协议并且注册成QML类型</li>\n<li>WOutputViewport：单个屏幕视口，当WOutputRenderWindow绑定多个屏幕输出时，WOutputViewport用以处理单个Wayland Output 输入、输出。</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>想利用 QtQuick 技术开发 Wayland 合成器的场景</li>\n<li>需要强大动画效果和UI渲染的 Wayland 合成器场景</li>\n</ul>\n<h2 id=\"相关项目\"><a href=\"#相关项目\" class=\"headerlink\" title=\"相关项目\"></a>相关项目</h2><p>一些基于 waylib 开发的知名项目包括：</p>\n<ul>\n<li>treeland: 一款使用 QtQuick 等技术打造的多会话合成器。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>waylib 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了开箱即用的 API 和 QML 组件，方便 QtQuick 技术方向的开发者开发 Wayland 合成器。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://github.com/vioken/waylib\">waylib的Github 页面</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-waylib？\"><a href=\"#什么是-waylib？\" class=\"headerlink\" title=\"什么是 waylib？\"></a>什么是 waylib？</h2><p>waylib 是一个功能库，用于将 qwlroots 与 QtQuick 的图形组件混合，利用 Qt 事件、渲染模型制作高级 Wayland 合成器库。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>waylib 提供了一组与Qt深入集成的 APi。其核心功能包括：</p>\n<ul>\n<li>渲染管理：利用 QtQuick 渲染模型支持 Wayland 合成器中 Surface 显示、后处理特效、动画等功能。</li>\n<li>输入处理：使用 Qt 事件模型传递、分发事件。</li>\n<li>提供QML组件：方便上层合成器实现调用。</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>waylib 的设计哲学是深度绑定 QtQuick、QRHI 技术，实现 OpenGL、Vulkan 多渲染 API 兼容，将 Wayland Surface 附加到 QQcuikItem,将一个或多个 Wayland Output 附加到 QQuickWindow.</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>WSurfaceItem：Wayland Surface显示控件抽象层。</li>\n<li>QWlrootsInterhration：qwlroots 与 Qt 窗口系统连接的 Qt QPA 插件实现。</li>\n<li>WOutputRenderWindow: Qt 窗口输出与 wlroots 送显中间件，胶合曾。</li>\n<li>WQuickWaylandServerInterface：Wayland 协议服务侧实现的基类，方便继承其用于实现各个协议并且注册成QML类型</li>\n<li>WOutputViewport：单个屏幕视口，当WOutputRenderWindow绑定多个屏幕输出时，WOutputViewport用以处理单个Wayland Output 输入、输出。</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>想利用 QtQuick 技术开发 Wayland 合成器的场景</li>\n<li>需要强大动画效果和UI渲染的 Wayland 合成器场景</li>\n</ul>\n<h2 id=\"相关项目\"><a href=\"#相关项目\" class=\"headerlink\" title=\"相关项目\"></a>相关项目</h2><p>一些基于 waylib 开发的知名项目包括：</p>\n<ul>\n<li>treeland: 一款使用 QtQuick 等技术打造的多会话合成器。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>waylib 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了开箱即用的 API 和 QML 组件，方便 QtQuick 技术方向的开发者开发 Wayland 合成器。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://github.com/vioken/waylib\">waylib的Github 页面</a>。</p>\n"},{"title":"wlroots简介","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 什么是 wlroots？\nwlroots 是一个底层库，用于构建基于 Wayland 显示服务器协议的窗口管理器和桌面环境。它由Wayland的发布经理 Simon Ser 主导开发，旨在简化 Wayland 生态系统中的窗口管理器的开发过程。\n\n## 核心功能\nwlroots提供了一组用于处理显示服务器基础设施的工具和抽象层。其核心功能包括：\n- 输出管理：处理显示设备（如显示器）的管理。\n- 输入处理：处理各种输入设备（如键盘、鼠标、触摸屏等）。\n- 渲染支持：支持硬件加速渲染和软件渲染。\n- Wayland 协议支持：实现了多种标准的 Wayland 扩展协议。\n- 多后端支持：支持多种后端，包括 DRM（直接渲染管理器）、X11 和头文件等。\n\n## 设计哲学\nwlroots的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使开发者可以根据需求选择和组合这些模块。这种设计大大降低了开发复杂性，使开发者能够专注于实现窗口管理器的核心功能，而无需重复造轮子。\n\n## 主要组件\n- wlr_output：管理输出设备（如显示器）。\n- wlr_input_device：管理输入设备（如键盘、鼠标等）。\n- wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。\n- wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。\n- wlr_surface：表示可显示的表面，通常是窗口的基本单位。\n\n框架图下如下：\n![1.1 wlroots框架图](/img/wlroots/wlroots.drawio.svg)\n## 使用场景\n- wlroots主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：\n- 自定义窗口管理器：开发者可以利用 wlroots 快速构建具有自定义功能的窗口管理器。\n- 桌面环境：为新的桌面环境提供基础设施支持。\n- 嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。\n- 实验性项目：研究和实验新的窗口管理和显示技术。\n\n## 相关项目\n一些基于 wlroots 开发的知名项目包括：\n\n- treeland: 一款使用 QtQuick 等技术打造的多会话合成器。\n- Sway：一个兼容i3的 Wayland 窗口管理器。\n- KWinFT：一款强大、快速、多功能且易于使用的复合窗口管理器，适用于 Linux 上的 Wayland 和 X11 窗口系统。\n- wayfire：一个模块化且可扩展的 Wayland 合成器。\n\n## 结语\nwlroots 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了坚实的基础。其模块化设计和广泛的协议支持，使开发者能够轻松构建高效、定制化的显示服务器解决方案。\n\n更多信息和详细文档可以访问 [wlroots的Gitlab 页面](https://gitlab.freedesktop.org/wlroots/wlroots)。","source":"_posts/wlroots.md","raw":"---\ntitle: wlroots简介\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - wlroots\n---\n\n## 什么是 wlroots？\nwlroots 是一个底层库，用于构建基于 Wayland 显示服务器协议的窗口管理器和桌面环境。它由Wayland的发布经理 Simon Ser 主导开发，旨在简化 Wayland 生态系统中的窗口管理器的开发过程。\n\n## 核心功能\nwlroots提供了一组用于处理显示服务器基础设施的工具和抽象层。其核心功能包括：\n- 输出管理：处理显示设备（如显示器）的管理。\n- 输入处理：处理各种输入设备（如键盘、鼠标、触摸屏等）。\n- 渲染支持：支持硬件加速渲染和软件渲染。\n- Wayland 协议支持：实现了多种标准的 Wayland 扩展协议。\n- 多后端支持：支持多种后端，包括 DRM（直接渲染管理器）、X11 和头文件等。\n\n## 设计哲学\nwlroots的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使开发者可以根据需求选择和组合这些模块。这种设计大大降低了开发复杂性，使开发者能够专注于实现窗口管理器的核心功能，而无需重复造轮子。\n\n## 主要组件\n- wlr_output：管理输出设备（如显示器）。\n- wlr_input_device：管理输入设备（如键盘、鼠标等）。\n- wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。\n- wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。\n- wlr_surface：表示可显示的表面，通常是窗口的基本单位。\n\n框架图下如下：\n![1.1 wlroots框架图](/img/wlroots/wlroots.drawio.svg)\n## 使用场景\n- wlroots主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：\n- 自定义窗口管理器：开发者可以利用 wlroots 快速构建具有自定义功能的窗口管理器。\n- 桌面环境：为新的桌面环境提供基础设施支持。\n- 嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。\n- 实验性项目：研究和实验新的窗口管理和显示技术。\n\n## 相关项目\n一些基于 wlroots 开发的知名项目包括：\n\n- treeland: 一款使用 QtQuick 等技术打造的多会话合成器。\n- Sway：一个兼容i3的 Wayland 窗口管理器。\n- KWinFT：一款强大、快速、多功能且易于使用的复合窗口管理器，适用于 Linux 上的 Wayland 和 X11 窗口系统。\n- wayfire：一个模块化且可扩展的 Wayland 合成器。\n\n## 结语\nwlroots 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了坚实的基础。其模块化设计和广泛的协议支持，使开发者能够轻松构建高效、定制化的显示服务器解决方案。\n\n更多信息和详细文档可以访问 [wlroots的Gitlab 页面](https://gitlab.freedesktop.org/wlroots/wlroots)。","slug":"wlroots","published":1,"updated":"2024-06-25T05:46:03.838Z","_id":"clxtz99e7000wm5sb3ejd4tvo","layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是-wlroots？\"><a href=\"#什么是-wlroots？\" class=\"headerlink\" title=\"什么是 wlroots？\"></a>什么是 wlroots？</h2><p>wlroots 是一个底层库，用于构建基于 Wayland 显示服务器协议的窗口管理器和桌面环境。它由Wayland的发布经理 Simon Ser 主导开发，旨在简化 Wayland 生态系统中的窗口管理器的开发过程。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>wlroots提供了一组用于处理显示服务器基础设施的工具和抽象层。其核心功能包括：</p>\n<ul>\n<li>输出管理：处理显示设备（如显示器）的管理。</li>\n<li>输入处理：处理各种输入设备（如键盘、鼠标、触摸屏等）。</li>\n<li>渲染支持：支持硬件加速渲染和软件渲染。</li>\n<li>Wayland 协议支持：实现了多种标准的 Wayland 扩展协议。</li>\n<li>多后端支持：支持多种后端，包括 DRM（直接渲染管理器）、X11 和头文件等。</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>wlroots的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使开发者可以根据需求选择和组合这些模块。这种设计大大降低了开发复杂性，使开发者能够专注于实现窗口管理器的核心功能，而无需重复造轮子。</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>wlr_output：管理输出设备（如显示器）。</li>\n<li>wlr_input_device：管理输入设备（如键盘、鼠标等）。</li>\n<li>wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。</li>\n<li>wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。</li>\n<li>wlr_surface：表示可显示的表面，通常是窗口的基本单位。</li>\n</ul>\n<p>框架图下如下：<br><img src=\"/img/wlroots/wlroots.drawio.svg\" alt=\"1.1 wlroots框架图\"></p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>wlroots主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：</li>\n<li>自定义窗口管理器：开发者可以利用 wlroots 快速构建具有自定义功能的窗口管理器。</li>\n<li>桌面环境：为新的桌面环境提供基础设施支持。</li>\n<li>嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。</li>\n<li>实验性项目：研究和实验新的窗口管理和显示技术。</li>\n</ul>\n<h2 id=\"相关项目\"><a href=\"#相关项目\" class=\"headerlink\" title=\"相关项目\"></a>相关项目</h2><p>一些基于 wlroots 开发的知名项目包括：</p>\n<ul>\n<li>treeland: 一款使用 QtQuick 等技术打造的多会话合成器。</li>\n<li>Sway：一个兼容i3的 Wayland 窗口管理器。</li>\n<li>KWinFT：一款强大、快速、多功能且易于使用的复合窗口管理器，适用于 Linux 上的 Wayland 和 X11 窗口系统。</li>\n<li>wayfire：一个模块化且可扩展的 Wayland 合成器。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>wlroots 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了坚实的基础。其模块化设计和广泛的协议支持，使开发者能够轻松构建高效、定制化的显示服务器解决方案。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://gitlab.freedesktop.org/wlroots/wlroots\">wlroots的Gitlab 页面</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-wlroots？\"><a href=\"#什么是-wlroots？\" class=\"headerlink\" title=\"什么是 wlroots？\"></a>什么是 wlroots？</h2><p>wlroots 是一个底层库，用于构建基于 Wayland 显示服务器协议的窗口管理器和桌面环境。它由Wayland的发布经理 Simon Ser 主导开发，旨在简化 Wayland 生态系统中的窗口管理器的开发过程。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>wlroots提供了一组用于处理显示服务器基础设施的工具和抽象层。其核心功能包括：</p>\n<ul>\n<li>输出管理：处理显示设备（如显示器）的管理。</li>\n<li>输入处理：处理各种输入设备（如键盘、鼠标、触摸屏等）。</li>\n<li>渲染支持：支持硬件加速渲染和软件渲染。</li>\n<li>Wayland 协议支持：实现了多种标准的 Wayland 扩展协议。</li>\n<li>多后端支持：支持多种后端，包括 DRM（直接渲染管理器）、X11 和头文件等。</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>wlroots的设计哲学是模块化和简洁。它将不同的功能分离到独立的模块中，使开发者可以根据需求选择和组合这些模块。这种设计大大降低了开发复杂性，使开发者能够专注于实现窗口管理器的核心功能，而无需重复造轮子。</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>wlr_output：管理输出设备（如显示器）。</li>\n<li>wlr_input_device：管理输入设备（如键盘、鼠标等）。</li>\n<li>wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。</li>\n<li>wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。</li>\n<li>wlr_surface：表示可显示的表面，通常是窗口的基本单位。</li>\n</ul>\n<p>框架图下如下：<br><img src=\"/img/wlroots/wlroots.drawio.svg\" alt=\"1.1 wlroots框架图\"></p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>wlroots主要用于开发Wayland显示服务器和窗口管理器，典型的使用场景包括：</li>\n<li>自定义窗口管理器：开发者可以利用 wlroots 快速构建具有自定义功能的窗口管理器。</li>\n<li>桌面环境：为新的桌面环境提供基础设施支持。</li>\n<li>嵌入式系统：在嵌入式系统中实现轻量级的显示服务器。</li>\n<li>实验性项目：研究和实验新的窗口管理和显示技术。</li>\n</ul>\n<h2 id=\"相关项目\"><a href=\"#相关项目\" class=\"headerlink\" title=\"相关项目\"></a>相关项目</h2><p>一些基于 wlroots 开发的知名项目包括：</p>\n<ul>\n<li>treeland: 一款使用 QtQuick 等技术打造的多会话合成器。</li>\n<li>Sway：一个兼容i3的 Wayland 窗口管理器。</li>\n<li>KWinFT：一款强大、快速、多功能且易于使用的复合窗口管理器，适用于 Linux 上的 Wayland 和 X11 窗口系统。</li>\n<li>wayfire：一个模块化且可扩展的 Wayland 合成器。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>wlroots 作为一个强大且灵活的库，为 Wayland 窗口管理器和显示服务器的开发提供了坚实的基础。其模块化设计和广泛的协议支持，使开发者能够轻松构建高效、定制化的显示服务器解决方案。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://gitlab.freedesktop.org/wlroots/wlroots\">wlroots的Gitlab 页面</a>。</p>\n"},{"title":"qwlroots简介","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 什么是 qwlroots？\nqwlroots 是基于wlroots Qt 风格的 Wrapper 库，旨在简化 Qt 中 wlroots API 的调用方式，满足 Qt 项目内调用 wlroots 的需求。。\n\n## 核心功能\nqwlroots 提供了一组用于封装 wlroots 的工具和抽象层。其核心功能包括：\n- wl_signal 信号处理：通过 QWSignalConnector,将 wlroots 中的信号转为 Qt C++类函数，方便转发成 Q_SIGNALS 无缝衔接Qt信号与槽机制。\n- 接口和协议封装：将 C 语言封装称Qt后，Qt 框架提供了丰富的工具和库，能够帮助开发者提升开发效率和代码质量\n\n## 设计哲学\n将 C 库转换为 Qt 库封装，利用 Qt 的面向对象特性和强大 API 能力，提供高效、灵活的接口，同时整合 Qt 的事件处理和信号槽机制，以推动合成器开发的现代化和可维护性。\n\n## 主要组件\n- QWObject <-> wlr_output：管理输出设备（如显示器）。\n- QWInputDevice <-> wlr_input_device：管理输入设备（如键盘、鼠标等）。\n- QWRender <-> wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。\n- QWBackend <-> wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。\n- QWSurface <-> wlr_surface：表示可显示的表面，通常是窗口的基本单位。\n\n## 使用场景\n- qwlroots 主要用于基于 Qt 开发 Wayland 显示服务器和窗口管理器，典型的使用场景包括：\n\n## 相关项目\n一些基于 qwlroots 开发的知名项目包括：\n\n- waylib: 一款基于 qwlroots 深度集成 QtQuick 的库，利用 QtQuick 的场景图模型简化窗口管理的复杂性\n\n## 结语\nqwlroots 作为一个基于 wlroots 的 Qt 风格库已被 wlroots 作为 Qt Wrapper libraries 收纳[Projects which use wlroots Gitlab 页面](https://gitlab.freedesktop.org/wlroots/wlroots/-/wikis/Projects-which-use-wlroots)，为使用 Qt 编写 Wayland 窗口管理器和显示服务器提供了便捷的道路。\n\n更多信息和详细文档可以访问 [qwlroots的Github 页面](https://github.com/vioken/qwlroots)。\n","source":"_posts/qwlroots.md","raw":"---\ntitle: qwlroots简介\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 什么是 qwlroots？\nqwlroots 是基于wlroots Qt 风格的 Wrapper 库，旨在简化 Qt 中 wlroots API 的调用方式，满足 Qt 项目内调用 wlroots 的需求。。\n\n## 核心功能\nqwlroots 提供了一组用于封装 wlroots 的工具和抽象层。其核心功能包括：\n- wl_signal 信号处理：通过 QWSignalConnector,将 wlroots 中的信号转为 Qt C++类函数，方便转发成 Q_SIGNALS 无缝衔接Qt信号与槽机制。\n- 接口和协议封装：将 C 语言封装称Qt后，Qt 框架提供了丰富的工具和库，能够帮助开发者提升开发效率和代码质量\n\n## 设计哲学\n将 C 库转换为 Qt 库封装，利用 Qt 的面向对象特性和强大 API 能力，提供高效、灵活的接口，同时整合 Qt 的事件处理和信号槽机制，以推动合成器开发的现代化和可维护性。\n\n## 主要组件\n- QWObject <-> wlr_output：管理输出设备（如显示器）。\n- QWInputDevice <-> wlr_input_device：管理输入设备（如键盘、鼠标等）。\n- QWRender <-> wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。\n- QWBackend <-> wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。\n- QWSurface <-> wlr_surface：表示可显示的表面，通常是窗口的基本单位。\n\n## 使用场景\n- qwlroots 主要用于基于 Qt 开发 Wayland 显示服务器和窗口管理器，典型的使用场景包括：\n\n## 相关项目\n一些基于 qwlroots 开发的知名项目包括：\n\n- waylib: 一款基于 qwlroots 深度集成 QtQuick 的库，利用 QtQuick 的场景图模型简化窗口管理的复杂性\n\n## 结语\nqwlroots 作为一个基于 wlroots 的 Qt 风格库已被 wlroots 作为 Qt Wrapper libraries 收纳[Projects which use wlroots Gitlab 页面](https://gitlab.freedesktop.org/wlroots/wlroots/-/wikis/Projects-which-use-wlroots)，为使用 Qt 编写 Wayland 窗口管理器和显示服务器提供了便捷的道路。\n\n更多信息和详细文档可以访问 [qwlroots的Github 页面](https://github.com/vioken/qwlroots)。\n","slug":"qwlroots","published":1,"updated":"2024-06-24T16:07:02.228Z","layout":"post","photos":[],"link":"","_id":"clxtzgw7l0000q9sb2qrraumv","content":"<h2 id=\"什么是-qwlroots？\"><a href=\"#什么是-qwlroots？\" class=\"headerlink\" title=\"什么是 qwlroots？\"></a>什么是 qwlroots？</h2><p>qwlroots 是基于wlroots Qt 风格的 Wrapper 库，旨在简化 Qt 中 wlroots API 的调用方式，满足 Qt 项目内调用 wlroots 的需求。。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>qwlroots 提供了一组用于封装 wlroots 的工具和抽象层。其核心功能包括：</p>\n<ul>\n<li>wl_signal 信号处理：通过 QWSignalConnector,将 wlroots 中的信号转为 Qt C++类函数，方便转发成 Q_SIGNALS 无缝衔接Qt信号与槽机制。</li>\n<li>接口和协议封装：将 C 语言封装称Qt后，Qt 框架提供了丰富的工具和库，能够帮助开发者提升开发效率和代码质量</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>将 C 库转换为 Qt 库封装，利用 Qt 的面向对象特性和强大 API 能力，提供高效、灵活的接口，同时整合 Qt 的事件处理和信号槽机制，以推动合成器开发的现代化和可维护性。</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>QWObject &lt;-&gt; wlr_output：管理输出设备（如显示器）。</li>\n<li>QWInputDevice &lt;-&gt; wlr_input_device：管理输入设备（如键盘、鼠标等）。</li>\n<li>QWRender &lt;-&gt; wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。</li>\n<li>QWBackend &lt;-&gt; wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。</li>\n<li>QWSurface &lt;-&gt; wlr_surface：表示可显示的表面，通常是窗口的基本单位。</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>qwlroots 主要用于基于 Qt 开发 Wayland 显示服务器和窗口管理器，典型的使用场景包括：</li>\n</ul>\n<h2 id=\"相关项目\"><a href=\"#相关项目\" class=\"headerlink\" title=\"相关项目\"></a>相关项目</h2><p>一些基于 qwlroots 开发的知名项目包括：</p>\n<ul>\n<li>waylib: 一款基于 qwlroots 深度集成 QtQuick 的库，利用 QtQuick 的场景图模型简化窗口管理的复杂性</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>qwlroots 作为一个基于 wlroots 的 Qt 风格库已被 wlroots 作为 Qt Wrapper libraries 收纳<a href=\"https://gitlab.freedesktop.org/wlroots/wlroots/-/wikis/Projects-which-use-wlroots\">Projects which use wlroots Gitlab 页面</a>，为使用 Qt 编写 Wayland 窗口管理器和显示服务器提供了便捷的道路。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://github.com/vioken/qwlroots\">qwlroots的Github 页面</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-qwlroots？\"><a href=\"#什么是-qwlroots？\" class=\"headerlink\" title=\"什么是 qwlroots？\"></a>什么是 qwlroots？</h2><p>qwlroots 是基于wlroots Qt 风格的 Wrapper 库，旨在简化 Qt 中 wlroots API 的调用方式，满足 Qt 项目内调用 wlroots 的需求。。</p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>qwlroots 提供了一组用于封装 wlroots 的工具和抽象层。其核心功能包括：</p>\n<ul>\n<li>wl_signal 信号处理：通过 QWSignalConnector,将 wlroots 中的信号转为 Qt C++类函数，方便转发成 Q_SIGNALS 无缝衔接Qt信号与槽机制。</li>\n<li>接口和协议封装：将 C 语言封装称Qt后，Qt 框架提供了丰富的工具和库，能够帮助开发者提升开发效率和代码质量</li>\n</ul>\n<h2 id=\"设计哲学\"><a href=\"#设计哲学\" class=\"headerlink\" title=\"设计哲学\"></a>设计哲学</h2><p>将 C 库转换为 Qt 库封装，利用 Qt 的面向对象特性和强大 API 能力，提供高效、灵活的接口，同时整合 Qt 的事件处理和信号槽机制，以推动合成器开发的现代化和可维护性。</p>\n<h2 id=\"主要组件\"><a href=\"#主要组件\" class=\"headerlink\" title=\"主要组件\"></a>主要组件</h2><ul>\n<li>QWObject &lt;-&gt; wlr_output：管理输出设备（如显示器）。</li>\n<li>QWInputDevice &lt;-&gt; wlr_input_device：管理输入设备（如键盘、鼠标等）。</li>\n<li>QWRender &lt;-&gt; wlr_renderer：提供抽象的渲染接口，支持 OpenGL、Vulkan、Pixman等渲染 API。</li>\n<li>QWBackend &lt;-&gt; wlr_backend：提供对不同底层系统（如 DRM、X11、Wayland、Headless等）的支持。</li>\n<li>QWSurface &lt;-&gt; wlr_surface：表示可显示的表面，通常是窗口的基本单位。</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>qwlroots 主要用于基于 Qt 开发 Wayland 显示服务器和窗口管理器，典型的使用场景包括：</li>\n</ul>\n<h2 id=\"相关项目\"><a href=\"#相关项目\" class=\"headerlink\" title=\"相关项目\"></a>相关项目</h2><p>一些基于 qwlroots 开发的知名项目包括：</p>\n<ul>\n<li>waylib: 一款基于 qwlroots 深度集成 QtQuick 的库，利用 QtQuick 的场景图模型简化窗口管理的复杂性</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>qwlroots 作为一个基于 wlroots 的 Qt 风格库已被 wlroots 作为 Qt Wrapper libraries 收纳<a href=\"https://gitlab.freedesktop.org/wlroots/wlroots/-/wikis/Projects-which-use-wlroots\">Projects which use wlroots Gitlab 页面</a>，为使用 Qt 编写 Wayland 窗口管理器和显示服务器提供了便捷的道路。</p>\n<p>更多信息和详细文档可以访问 <a href=\"https://github.com/vioken/qwlroots\">qwlroots的Github 页面</a>。</p>\n"},{"title":"treeland导航","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 简介\n- [wlroots简介](../wlroots)\n- [qwlroots简介](../qwlroots)\n- [waylib简介](../waylib)\n- [treeland简介](../treeland)\n\n## 文章列表\n- [treeland初始化](../treeland-init)\n- [Qt QPA框架对接](../wl-qpa-bridge)\n- [鼠标事件处理](../event)\n- [显示器设备分析](../monitor-init-hotplug)\n- [输入设备分析](../inputdevice-init-hotplug)\n- [窗口显示](../surface-init-update)\n- [drm送显分析](../drm-commit)","source":"_posts/treeland-index.md","raw":"---\ntitle: treeland导航\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 简介\n- [wlroots简介](../wlroots)\n- [qwlroots简介](../qwlroots)\n- [waylib简介](../waylib)\n- [treeland简介](../treeland)\n\n## 文章列表\n- [treeland初始化](../treeland-init)\n- [Qt QPA框架对接](../wl-qpa-bridge)\n- [鼠标事件处理](../event)\n- [显示器设备分析](../monitor-init-hotplug)\n- [输入设备分析](../inputdevice-init-hotplug)\n- [窗口显示](../surface-init-update)\n- [drm送显分析](../drm-commit)","slug":"treeland-index","published":1,"updated":"2024-06-25T13:09:52.690Z","_id":"clxtzi5as00006esb4cgxb5g9","layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li><a href=\"../wlroots\">wlroots简介</a></li>\n<li><a href=\"../qwlroots\">qwlroots简介</a></li>\n<li><a href=\"../waylib\">waylib简介</a></li>\n<li><a href=\"../treeland\">treeland简介</a></li>\n</ul>\n<h2 id=\"文章列表\"><a href=\"#文章列表\" class=\"headerlink\" title=\"文章列表\"></a>文章列表</h2><ul>\n<li><a href=\"../treeland-init\">treeland初始化</a></li>\n<li><a href=\"../wl-qpa-bridge\">Qt QPA框架对接</a></li>\n<li><a href=\"../event\">鼠标事件处理</a></li>\n<li><a href=\"../monitor-init-hotplug\">显示器设备分析</a></li>\n<li><a href=\"../inputdevice-init-hotplug\">输入设备分析</a></li>\n<li><a href=\"../surface-init-update\">窗口显示</a></li>\n<li><a href=\"../drm-commit\">drm送显分析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li><a href=\"../wlroots\">wlroots简介</a></li>\n<li><a href=\"../qwlroots\">qwlroots简介</a></li>\n<li><a href=\"../waylib\">waylib简介</a></li>\n<li><a href=\"../treeland\">treeland简介</a></li>\n</ul>\n<h2 id=\"文章列表\"><a href=\"#文章列表\" class=\"headerlink\" title=\"文章列表\"></a>文章列表</h2><ul>\n<li><a href=\"../treeland-init\">treeland初始化</a></li>\n<li><a href=\"../wl-qpa-bridge\">Qt QPA框架对接</a></li>\n<li><a href=\"../event\">鼠标事件处理</a></li>\n<li><a href=\"../monitor-init-hotplug\">显示器设备分析</a></li>\n<li><a href=\"../inputdevice-init-hotplug\">输入设备分析</a></li>\n<li><a href=\"../surface-init-update\">窗口显示</a></li>\n<li><a href=\"../drm-commit\">drm送显分析</a></li>\n</ul>\n"},{"title":"treeland 初始化分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 初始化流程\ntreeland 初始化与 QML 应用代码初始化类似，只是对于 QPA 的初始化 treeland 是显式地，其目的是使其加载 waylib项目中 的 QWlrootsIntergration 插件，将 wlroots 相关功能与 Qt 对接。\n![1.1 treeland初始化流程](/img/treeland/main.drawio.svg)\n\n主代码如下：\n```c++\n    QWLog::init();\n    WServer::initializeQPA();\n\n    QGuiApplication::setAttribute(Qt::AA_UseOpenGLES);\n    QGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);\n    QGuiApplication::setQuitOnLastWindowClosed(false);\n    QGuiApplication app(argc, argv);\n\n    QQmlApplicationEngine waylandEngine;\n    QString cursorThemeName = getenv(\"XCURSOR_THEME\");\n    waylandEngine.rootContext()->setContextProperty(\"cursorThemeName\", cursorThemeName);\n\n#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)\n    waylandEngine.loadFromModule(\"Tinywl\", \"Main\");\n#else\n    waylandEngine.load(QUrl(u\"qrc:/Tinywl/Main.qml\"_qs));\n#endif\n    WServer *server = waylandEngine.rootObjects().first()->findChild<WServer*>();\n    Q_ASSERT(server);\n    Q_ASSERT(server->isRunning());\n\n    auto backend = server->findChild<WQuickBackend*>();\n    Q_ASSERT(backend);\n```","source":"_posts/treeland-init.md","raw":"---\ntitle: treeland 初始化分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 初始化流程\ntreeland 初始化与 QML 应用代码初始化类似，只是对于 QPA 的初始化 treeland 是显式地，其目的是使其加载 waylib项目中 的 QWlrootsIntergration 插件，将 wlroots 相关功能与 Qt 对接。\n![1.1 treeland初始化流程](/img/treeland/main.drawio.svg)\n\n主代码如下：\n```c++\n    QWLog::init();\n    WServer::initializeQPA();\n\n    QGuiApplication::setAttribute(Qt::AA_UseOpenGLES);\n    QGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);\n    QGuiApplication::setQuitOnLastWindowClosed(false);\n    QGuiApplication app(argc, argv);\n\n    QQmlApplicationEngine waylandEngine;\n    QString cursorThemeName = getenv(\"XCURSOR_THEME\");\n    waylandEngine.rootContext()->setContextProperty(\"cursorThemeName\", cursorThemeName);\n\n#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)\n    waylandEngine.loadFromModule(\"Tinywl\", \"Main\");\n#else\n    waylandEngine.load(QUrl(u\"qrc:/Tinywl/Main.qml\"_qs));\n#endif\n    WServer *server = waylandEngine.rootObjects().first()->findChild<WServer*>();\n    Q_ASSERT(server);\n    Q_ASSERT(server->isRunning());\n\n    auto backend = server->findChild<WQuickBackend*>();\n    Q_ASSERT(backend);\n```","slug":"treeland-init","published":1,"updated":"2024-06-25T11:32:34.551Z","_id":"clxtztloz0000lksbgxnb18td","layout":"post","photos":[],"link":"","content":"<h2 id=\"初始化流程\"><a href=\"#初始化流程\" class=\"headerlink\" title=\"初始化流程\"></a>初始化流程</h2><p>treeland 初始化与 QML 应用代码初始化类似，只是对于 QPA 的初始化 treeland 是显式地，其目的是使其加载 waylib项目中 的 QWlrootsIntergration 插件，将 wlroots 相关功能与 Qt 对接。<br><img src=\"/img/treeland/main.drawio.svg\" alt=\"1.1 treeland初始化流程\"></p>\n<p>主代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    QWLog::<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    WServer::<span class=\"built_in\">initializeQPA</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    QGuiApplication::<span class=\"built_in\">setAttribute</span>(Qt::AA_UseOpenGLES);</span><br><span class=\"line\">    QGuiApplication::<span class=\"built_in\">setHighDpiScaleFactorRoundingPolicy</span>(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);</span><br><span class=\"line\">    QGuiApplication::<span class=\"built_in\">setQuitOnLastWindowClosed</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"function\">QGuiApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QQmlApplicationEngine waylandEngine;</span><br><span class=\"line\">    QString cursorThemeName = <span class=\"built_in\">getenv</span>(<span class=\"string\">&quot;XCURSOR_THEME&quot;</span>);</span><br><span class=\"line\">    waylandEngine.<span class=\"built_in\">rootContext</span>()-&gt;<span class=\"built_in\">setContextProperty</span>(<span class=\"string\">&quot;cursorThemeName&quot;</span>, cursorThemeName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(6, 5, 0)</span></span><br><span class=\"line\">    waylandEngine.<span class=\"built_in\">loadFromModule</span>(<span class=\"string\">&quot;Tinywl&quot;</span>, <span class=\"string\">&quot;Main&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    waylandEngine.<span class=\"built_in\">load</span>(<span class=\"built_in\">QUrl</span>(<span class=\"string\">u&quot;qrc:/Tinywl/Main.qml&quot;</span>_qs));</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    WServer *server = waylandEngine.<span class=\"built_in\">rootObjects</span>().<span class=\"built_in\">first</span>()-&gt;<span class=\"built_in\">findChild</span>&lt;WServer*&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(server);</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(server-&gt;<span class=\"built_in\">isRunning</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> backend = server-&gt;<span class=\"built_in\">findChild</span>&lt;WQuickBackend*&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(backend);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初始化流程\"><a href=\"#初始化流程\" class=\"headerlink\" title=\"初始化流程\"></a>初始化流程</h2><p>treeland 初始化与 QML 应用代码初始化类似，只是对于 QPA 的初始化 treeland 是显式地，其目的是使其加载 waylib项目中 的 QWlrootsIntergration 插件，将 wlroots 相关功能与 Qt 对接。<br><img src=\"/img/treeland/main.drawio.svg\" alt=\"1.1 treeland初始化流程\"></p>\n<p>主代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    QWLog::<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    WServer::<span class=\"built_in\">initializeQPA</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    QGuiApplication::<span class=\"built_in\">setAttribute</span>(Qt::AA_UseOpenGLES);</span><br><span class=\"line\">    QGuiApplication::<span class=\"built_in\">setHighDpiScaleFactorRoundingPolicy</span>(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);</span><br><span class=\"line\">    QGuiApplication::<span class=\"built_in\">setQuitOnLastWindowClosed</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"function\">QGuiApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QQmlApplicationEngine waylandEngine;</span><br><span class=\"line\">    QString cursorThemeName = <span class=\"built_in\">getenv</span>(<span class=\"string\">&quot;XCURSOR_THEME&quot;</span>);</span><br><span class=\"line\">    waylandEngine.<span class=\"built_in\">rootContext</span>()-&gt;<span class=\"built_in\">setContextProperty</span>(<span class=\"string\">&quot;cursorThemeName&quot;</span>, cursorThemeName);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(6, 5, 0)</span></span><br><span class=\"line\">    waylandEngine.<span class=\"built_in\">loadFromModule</span>(<span class=\"string\">&quot;Tinywl&quot;</span>, <span class=\"string\">&quot;Main&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    waylandEngine.<span class=\"built_in\">load</span>(<span class=\"built_in\">QUrl</span>(<span class=\"string\">u&quot;qrc:/Tinywl/Main.qml&quot;</span>_qs));</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    WServer *server = waylandEngine.<span class=\"built_in\">rootObjects</span>().<span class=\"built_in\">first</span>()-&gt;<span class=\"built_in\">findChild</span>&lt;WServer*&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(server);</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(server-&gt;<span class=\"built_in\">isRunning</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> backend = server-&gt;<span class=\"built_in\">findChild</span>&lt;WQuickBackend*&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(backend);</span><br></pre></td></tr></table></figure>"},{"title":"treeland 与Qt QPA对接分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## QPA 插件\n\n|**类名**|**描述**|\n|:----|:----|\n|QWlrootsOutputWindow|Qt窗口平台抽象实现，实现Qt中QWindow部分功能 |\n|QWlrootsIntegration|Qt QPA平台插件实现，对接wlroots输入输出到Qt |\n|QWlrootsCursor|Qt QPA光标平台抽象实现，对接wlr_cursor 前端部分功能到Qcursor（代码待完善） |\n|QWlrootsScreen|Qt QPA屏幕平台抽象实现，对接 wlr_output 前端部分功能到 Qscreen |\n\n其中如下图1.1所示是将 wlr_renderer 转为 QWlrootsIntegration 的流程：\n![1.1 QPA硬件渲染对接流程](/img/treeland/wlrc-qpa-rhi.drawio.svg)\n\nwlroots支持Pixman、OpenGLES、Vulkan渲染，其与QQuickWindow更加详细的渲染绑定如下图：\n```c++\nQQuickRenderTarget WRenderHelper::acquireRenderTarget(QQuickRenderControl *rc, QWBuffer *buffer)\n{\n    W_D(WRenderHelper);\n    Q_ASSERT(buffer);\n\n    if (d->size.isEmpty())\n        return {};\n\n    for (int i = 0; i < d->buffers.count(); ++i) {\n        auto data = d->buffers[i];\n        if (data->buffer == buffer) {\n            d->lastBuffer = data;\n            return data->renderTarget;\n        }\n    }\n\n    std::unique_ptr<BufferData> bufferData(new BufferData);\n    bufferData->buffer = buffer;\n    auto texture = QWTexture::fromBuffer(d->renderer, buffer);\n\n    QQuickRenderTarget rt;\n\n    if (wlr_renderer_is_pixman(d->renderer->handle())) {\n        pixman_image_t *image = wlr_pixman_texture_get_image(texture->handle());\n        void *data = pixman_image_get_data(image);\n        if (bufferData->paintDevice.constBits() != data)\n            bufferData->paintDevice = WTools::fromPixmanImage(image, data);\n        Q_ASSERT(!bufferData->paintDevice.isNull());\n        rt = QQuickRenderTarget::fromPaintDevice(&bufferData->paintDevice);\n    }\n#ifdef ENABLE_VULKAN_RENDER\n    else if (wlr_renderer_is_vk(d->renderer->handle())) {\n        wlr_vk_image_attribs attribs;\n        wlr_vk_texture_get_image_attribs(texture->handle(), &attribs);\n        rt = QQuickRenderTarget::fromVulkanImage(attribs.image, attribs.layout, attribs.format, d->size);\n    }\n#endif\n    else if (wlr_renderer_is_gles2(d->renderer->handle())) {\n        wlr_gles2_texture_attribs attribs;\n        wlr_gles2_texture_get_attribs(texture->handle(), &attribs);\n\n        rt = QQuickRenderTarget::fromOpenGLTexture(attribs.tex, d->size);\n        rt.setMirrorVertically(true);\n    }\n\n    delete texture;\n    bufferData->renderTarget = rt;\n\n    if (QSGRendererInterface::isApiRhiBased(getGraphicsApi(rc))) {\n        if (!rt.isNull()) {\n            // Force convert to Rhi render target\n            if (!d->ensureRhiRenderTarget(rc, bufferData.get()))\n                bufferData->renderTarget = {};\n        }\n\n        if (bufferData->renderTarget.isNull())\n            return {};\n    }\n\n    connect(buffer, SIGNAL(beforeDestroy()),\n            this, SLOT(onBufferDestroy()), Qt::UniqueConnection);\n\n    d->buffers.append(bufferData.release());\n    d->lastBuffer = d->buffers.last();\n\n    return d->buffers.last()->renderTarget;\n}\n```\n\n屏幕热插拔\n```c++\n// 显示器插入\nvoid WBackendPrivate::on_new_output(QWOutput *output)\n{\n    auto woutput = new WOutput(output, q_func());\n\n    outputList << woutput;\n    QWlrootsIntegration::instance()->addScreen(woutput); // 对接QPA\n\n    woutput->safeConnect(&QWOutput::beforeDestroy, q_func()->server(), [this, output] {\n        on_output_destroy(output);\n    });\n\n    q_func()->outputAdded(woutput);\n}\n\n// 显示器拔出\nvoid WBackendPrivate::on_output_destroy(QWOutput *output)\n{\n    for (int i = 0; i < outputList.count(); ++i) {\n        if (outputList.at(i)->handle() == output) {\n            auto device = outputList.takeAt(i);\n            q_func()->outputRemoved(device);\n            delete device;\n            return;\n        }\n    }\n}\n\nvoid WBackend::outputRemoved(WOutput *output)\n{\n    QWlrootsIntegration::instance()->removeScreen(output); // 对接QPA\n}\n```\n\n输入设备热插拔\n```c++\n// 输入设备插入\nvoid WSeatPrivate::attachInputDevice(WInputDevice *device)\n{\n    W_Q(WSeat);\n    device->setSeat(q);\n    auto qtDevice = QWlrootsIntegration::instance()->addInputDevice(device, name);  // 对接QPA\n    Q_ASSERT(qtDevice);\n\n    ....\n}\n\n// 输入设备拔出\nvoid WSeatPrivate::detachInputDevice(WInputDevice *device)\n{\n    if (cursor && device->type() == WInputDevice::Type::Pointer)\n        cursor->detachInputDevice(device);\n\n    bool ok = QWlrootsIntegration::instance()->removeInputDevice(device); // 对接QPA\n    Q_ASSERT(ok);\n}\n```","source":"_posts/wl-qpa-bridge.md","raw":"---\ntitle: treeland 与Qt QPA对接分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## QPA 插件\n\n|**类名**|**描述**|\n|:----|:----|\n|QWlrootsOutputWindow|Qt窗口平台抽象实现，实现Qt中QWindow部分功能 |\n|QWlrootsIntegration|Qt QPA平台插件实现，对接wlroots输入输出到Qt |\n|QWlrootsCursor|Qt QPA光标平台抽象实现，对接wlr_cursor 前端部分功能到Qcursor（代码待完善） |\n|QWlrootsScreen|Qt QPA屏幕平台抽象实现，对接 wlr_output 前端部分功能到 Qscreen |\n\n其中如下图1.1所示是将 wlr_renderer 转为 QWlrootsIntegration 的流程：\n![1.1 QPA硬件渲染对接流程](/img/treeland/wlrc-qpa-rhi.drawio.svg)\n\nwlroots支持Pixman、OpenGLES、Vulkan渲染，其与QQuickWindow更加详细的渲染绑定如下图：\n```c++\nQQuickRenderTarget WRenderHelper::acquireRenderTarget(QQuickRenderControl *rc, QWBuffer *buffer)\n{\n    W_D(WRenderHelper);\n    Q_ASSERT(buffer);\n\n    if (d->size.isEmpty())\n        return {};\n\n    for (int i = 0; i < d->buffers.count(); ++i) {\n        auto data = d->buffers[i];\n        if (data->buffer == buffer) {\n            d->lastBuffer = data;\n            return data->renderTarget;\n        }\n    }\n\n    std::unique_ptr<BufferData> bufferData(new BufferData);\n    bufferData->buffer = buffer;\n    auto texture = QWTexture::fromBuffer(d->renderer, buffer);\n\n    QQuickRenderTarget rt;\n\n    if (wlr_renderer_is_pixman(d->renderer->handle())) {\n        pixman_image_t *image = wlr_pixman_texture_get_image(texture->handle());\n        void *data = pixman_image_get_data(image);\n        if (bufferData->paintDevice.constBits() != data)\n            bufferData->paintDevice = WTools::fromPixmanImage(image, data);\n        Q_ASSERT(!bufferData->paintDevice.isNull());\n        rt = QQuickRenderTarget::fromPaintDevice(&bufferData->paintDevice);\n    }\n#ifdef ENABLE_VULKAN_RENDER\n    else if (wlr_renderer_is_vk(d->renderer->handle())) {\n        wlr_vk_image_attribs attribs;\n        wlr_vk_texture_get_image_attribs(texture->handle(), &attribs);\n        rt = QQuickRenderTarget::fromVulkanImage(attribs.image, attribs.layout, attribs.format, d->size);\n    }\n#endif\n    else if (wlr_renderer_is_gles2(d->renderer->handle())) {\n        wlr_gles2_texture_attribs attribs;\n        wlr_gles2_texture_get_attribs(texture->handle(), &attribs);\n\n        rt = QQuickRenderTarget::fromOpenGLTexture(attribs.tex, d->size);\n        rt.setMirrorVertically(true);\n    }\n\n    delete texture;\n    bufferData->renderTarget = rt;\n\n    if (QSGRendererInterface::isApiRhiBased(getGraphicsApi(rc))) {\n        if (!rt.isNull()) {\n            // Force convert to Rhi render target\n            if (!d->ensureRhiRenderTarget(rc, bufferData.get()))\n                bufferData->renderTarget = {};\n        }\n\n        if (bufferData->renderTarget.isNull())\n            return {};\n    }\n\n    connect(buffer, SIGNAL(beforeDestroy()),\n            this, SLOT(onBufferDestroy()), Qt::UniqueConnection);\n\n    d->buffers.append(bufferData.release());\n    d->lastBuffer = d->buffers.last();\n\n    return d->buffers.last()->renderTarget;\n}\n```\n\n屏幕热插拔\n```c++\n// 显示器插入\nvoid WBackendPrivate::on_new_output(QWOutput *output)\n{\n    auto woutput = new WOutput(output, q_func());\n\n    outputList << woutput;\n    QWlrootsIntegration::instance()->addScreen(woutput); // 对接QPA\n\n    woutput->safeConnect(&QWOutput::beforeDestroy, q_func()->server(), [this, output] {\n        on_output_destroy(output);\n    });\n\n    q_func()->outputAdded(woutput);\n}\n\n// 显示器拔出\nvoid WBackendPrivate::on_output_destroy(QWOutput *output)\n{\n    for (int i = 0; i < outputList.count(); ++i) {\n        if (outputList.at(i)->handle() == output) {\n            auto device = outputList.takeAt(i);\n            q_func()->outputRemoved(device);\n            delete device;\n            return;\n        }\n    }\n}\n\nvoid WBackend::outputRemoved(WOutput *output)\n{\n    QWlrootsIntegration::instance()->removeScreen(output); // 对接QPA\n}\n```\n\n输入设备热插拔\n```c++\n// 输入设备插入\nvoid WSeatPrivate::attachInputDevice(WInputDevice *device)\n{\n    W_Q(WSeat);\n    device->setSeat(q);\n    auto qtDevice = QWlrootsIntegration::instance()->addInputDevice(device, name);  // 对接QPA\n    Q_ASSERT(qtDevice);\n\n    ....\n}\n\n// 输入设备拔出\nvoid WSeatPrivate::detachInputDevice(WInputDevice *device)\n{\n    if (cursor && device->type() == WInputDevice::Type::Pointer)\n        cursor->detachInputDevice(device);\n\n    bool ok = QWlrootsIntegration::instance()->removeInputDevice(device); // 对接QPA\n    Q_ASSERT(ok);\n}\n```","slug":"wl-qpa-bridge","published":1,"updated":"2024-06-25T12:01:43.068Z","_id":"clxubzzkk0000zosbfvzsaksd","layout":"post","photos":[],"link":"","content":"<h2 id=\"QPA-插件\"><a href=\"#QPA-插件\" class=\"headerlink\" title=\"QPA 插件\"></a>QPA 插件</h2><table>\n<thead>\n<tr>\n<th align=\"left\"><strong>类名</strong></th>\n<th align=\"left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">QWlrootsOutputWindow</td>\n<td align=\"left\">Qt窗口平台抽象实现，实现Qt中QWindow部分功能</td>\n</tr>\n<tr>\n<td align=\"left\">QWlrootsIntegration</td>\n<td align=\"left\">Qt QPA平台插件实现，对接wlroots输入输出到Qt</td>\n</tr>\n<tr>\n<td align=\"left\">QWlrootsCursor</td>\n<td align=\"left\">Qt QPA光标平台抽象实现，对接wlr_cursor 前端部分功能到Qcursor（代码待完善）</td>\n</tr>\n<tr>\n<td align=\"left\">QWlrootsScreen</td>\n<td align=\"left\">Qt QPA屏幕平台抽象实现，对接 wlr_output 前端部分功能到 Qscreen</td>\n</tr>\n</tbody></table>\n<p>其中如下图1.1所示是将 wlr_renderer 转为 QWlrootsIntegration 的流程：<br><img src=\"/img/treeland/wlrc-qpa-rhi.drawio.svg\" alt=\"1.1 QPA硬件渲染对接流程\"></p>\n<p>wlroots支持Pixman、OpenGLES、Vulkan渲染，其与QQuickWindow更加详细的渲染绑定如下图：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QQuickRenderTarget <span class=\"title\">WRenderHelper::acquireRenderTarget</span><span class=\"params\">(QQuickRenderControl *rc, QWBuffer *buffer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">W_D</span>(WRenderHelper);</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d-&gt;size.<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; d-&gt;buffers.<span class=\"built_in\">count</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> data = d-&gt;buffers[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data-&gt;buffer == buffer) &#123;</span><br><span class=\"line\">            d-&gt;lastBuffer = data;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data-&gt;renderTarget;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;BufferData&gt; <span class=\"title\">bufferData</span><span class=\"params\">(<span class=\"keyword\">new</span> BufferData)</span></span>;</span><br><span class=\"line\">    bufferData-&gt;buffer = buffer;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> texture = QWTexture::<span class=\"built_in\">fromBuffer</span>(d-&gt;renderer, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    QQuickRenderTarget rt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">wlr_renderer_is_pixman</span>(d-&gt;renderer-&gt;<span class=\"built_in\">handle</span>())) &#123;</span><br><span class=\"line\">        <span class=\"type\">pixman_image_t</span> *image = <span class=\"built_in\">wlr_pixman_texture_get_image</span>(texture-&gt;<span class=\"built_in\">handle</span>());</span><br><span class=\"line\">        <span class=\"type\">void</span> *data = <span class=\"built_in\">pixman_image_get_data</span>(image);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bufferData-&gt;paintDevice.<span class=\"built_in\">constBits</span>() != data)</span><br><span class=\"line\">            bufferData-&gt;paintDevice = WTools::<span class=\"built_in\">fromPixmanImage</span>(image, data);</span><br><span class=\"line\">        <span class=\"built_in\">Q_ASSERT</span>(!bufferData-&gt;paintDevice.<span class=\"built_in\">isNull</span>());</span><br><span class=\"line\">        rt = QQuickRenderTarget::<span class=\"built_in\">fromPaintDevice</span>(&amp;bufferData-&gt;paintDevice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> ENABLE_VULKAN_RENDER</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">wlr_renderer_is_vk</span>(d-&gt;renderer-&gt;<span class=\"built_in\">handle</span>())) &#123;</span><br><span class=\"line\">        wlr_vk_image_attribs attribs;</span><br><span class=\"line\">        <span class=\"built_in\">wlr_vk_texture_get_image_attribs</span>(texture-&gt;<span class=\"built_in\">handle</span>(), &amp;attribs);</span><br><span class=\"line\">        rt = QQuickRenderTarget::<span class=\"built_in\">fromVulkanImage</span>(attribs.image, attribs.layout, attribs.format, d-&gt;size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">wlr_renderer_is_gles2</span>(d-&gt;renderer-&gt;<span class=\"built_in\">handle</span>())) &#123;</span><br><span class=\"line\">        wlr_gles2_texture_attribs attribs;</span><br><span class=\"line\">        <span class=\"built_in\">wlr_gles2_texture_get_attribs</span>(texture-&gt;<span class=\"built_in\">handle</span>(), &amp;attribs);</span><br><span class=\"line\"></span><br><span class=\"line\">        rt = QQuickRenderTarget::<span class=\"built_in\">fromOpenGLTexture</span>(attribs.tex, d-&gt;size);</span><br><span class=\"line\">        rt.<span class=\"built_in\">setMirrorVertically</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> texture;</span><br><span class=\"line\">    bufferData-&gt;renderTarget = rt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (QSGRendererInterface::<span class=\"built_in\">isApiRhiBased</span>(<span class=\"built_in\">getGraphicsApi</span>(rc))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt.<span class=\"built_in\">isNull</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Force convert to Rhi render target</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!d-&gt;<span class=\"built_in\">ensureRhiRenderTarget</span>(rc, bufferData.<span class=\"built_in\">get</span>()))</span><br><span class=\"line\">                bufferData-&gt;renderTarget = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bufferData-&gt;renderTarget.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(buffer, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">beforeDestroy</span>()),</span><br><span class=\"line\">            <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">onBufferDestroy</span>()), Qt::UniqueConnection);</span><br><span class=\"line\"></span><br><span class=\"line\">    d-&gt;buffers.<span class=\"built_in\">append</span>(bufferData.<span class=\"built_in\">release</span>());</span><br><span class=\"line\">    d-&gt;lastBuffer = d-&gt;buffers.<span class=\"built_in\">last</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d-&gt;buffers.<span class=\"built_in\">last</span>()-&gt;renderTarget;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>屏幕热插拔</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示器插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WBackendPrivate::on_new_output</span><span class=\"params\">(QWOutput *output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> woutput = <span class=\"keyword\">new</span> <span class=\"built_in\">WOutput</span>(output, <span class=\"built_in\">q_func</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    outputList &lt;&lt; woutput;</span><br><span class=\"line\">    QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">addScreen</span>(woutput); <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\"></span><br><span class=\"line\">    woutput-&gt;<span class=\"built_in\">safeConnect</span>(&amp;QWOutput::beforeDestroy, <span class=\"built_in\">q_func</span>()-&gt;<span class=\"built_in\">server</span>(), [<span class=\"keyword\">this</span>, output] &#123;</span><br><span class=\"line\">        <span class=\"built_in\">on_output_destroy</span>(output);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">q_func</span>()-&gt;<span class=\"built_in\">outputAdded</span>(woutput);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示器拔出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WBackendPrivate::on_output_destroy</span><span class=\"params\">(QWOutput *output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outputList.<span class=\"built_in\">count</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outputList.<span class=\"built_in\">at</span>(i)-&gt;<span class=\"built_in\">handle</span>() == output) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> device = outputList.<span class=\"built_in\">takeAt</span>(i);</span><br><span class=\"line\">            <span class=\"built_in\">q_func</span>()-&gt;<span class=\"built_in\">outputRemoved</span>(device);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> device;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WBackend::outputRemoved</span><span class=\"params\">(WOutput *output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">removeScreen</span>(output); <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入设备热插拔</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入设备插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WSeatPrivate::attachInputDevice</span><span class=\"params\">(WInputDevice *device)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">W_Q</span>(WSeat);</span><br><span class=\"line\">    device-&gt;<span class=\"built_in\">setSeat</span>(q);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> qtDevice = QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">addInputDevice</span>(device, name);  <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(qtDevice);</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入设备拔出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WSeatPrivate::detachInputDevice</span><span class=\"params\">(WInputDevice *device)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cursor &amp;&amp; device-&gt;<span class=\"built_in\">type</span>() == WInputDevice::Type::Pointer)</span><br><span class=\"line\">        cursor-&gt;<span class=\"built_in\">detachInputDevice</span>(device);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">bool</span> ok = QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">removeInputDevice</span>(device); <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(ok);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"QPA-插件\"><a href=\"#QPA-插件\" class=\"headerlink\" title=\"QPA 插件\"></a>QPA 插件</h2><table>\n<thead>\n<tr>\n<th align=\"left\"><strong>类名</strong></th>\n<th align=\"left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">QWlrootsOutputWindow</td>\n<td align=\"left\">Qt窗口平台抽象实现，实现Qt中QWindow部分功能</td>\n</tr>\n<tr>\n<td align=\"left\">QWlrootsIntegration</td>\n<td align=\"left\">Qt QPA平台插件实现，对接wlroots输入输出到Qt</td>\n</tr>\n<tr>\n<td align=\"left\">QWlrootsCursor</td>\n<td align=\"left\">Qt QPA光标平台抽象实现，对接wlr_cursor 前端部分功能到Qcursor（代码待完善）</td>\n</tr>\n<tr>\n<td align=\"left\">QWlrootsScreen</td>\n<td align=\"left\">Qt QPA屏幕平台抽象实现，对接 wlr_output 前端部分功能到 Qscreen</td>\n</tr>\n</tbody></table>\n<p>其中如下图1.1所示是将 wlr_renderer 转为 QWlrootsIntegration 的流程：<br><img src=\"/img/treeland/wlrc-qpa-rhi.drawio.svg\" alt=\"1.1 QPA硬件渲染对接流程\"></p>\n<p>wlroots支持Pixman、OpenGLES、Vulkan渲染，其与QQuickWindow更加详细的渲染绑定如下图：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QQuickRenderTarget <span class=\"title\">WRenderHelper::acquireRenderTarget</span><span class=\"params\">(QQuickRenderControl *rc, QWBuffer *buffer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">W_D</span>(WRenderHelper);</span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d-&gt;size.<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; d-&gt;buffers.<span class=\"built_in\">count</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> data = d-&gt;buffers[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data-&gt;buffer == buffer) &#123;</span><br><span class=\"line\">            d-&gt;lastBuffer = data;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data-&gt;renderTarget;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::unique_ptr&lt;BufferData&gt; <span class=\"title\">bufferData</span><span class=\"params\">(<span class=\"keyword\">new</span> BufferData)</span></span>;</span><br><span class=\"line\">    bufferData-&gt;buffer = buffer;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> texture = QWTexture::<span class=\"built_in\">fromBuffer</span>(d-&gt;renderer, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    QQuickRenderTarget rt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">wlr_renderer_is_pixman</span>(d-&gt;renderer-&gt;<span class=\"built_in\">handle</span>())) &#123;</span><br><span class=\"line\">        <span class=\"type\">pixman_image_t</span> *image = <span class=\"built_in\">wlr_pixman_texture_get_image</span>(texture-&gt;<span class=\"built_in\">handle</span>());</span><br><span class=\"line\">        <span class=\"type\">void</span> *data = <span class=\"built_in\">pixman_image_get_data</span>(image);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bufferData-&gt;paintDevice.<span class=\"built_in\">constBits</span>() != data)</span><br><span class=\"line\">            bufferData-&gt;paintDevice = WTools::<span class=\"built_in\">fromPixmanImage</span>(image, data);</span><br><span class=\"line\">        <span class=\"built_in\">Q_ASSERT</span>(!bufferData-&gt;paintDevice.<span class=\"built_in\">isNull</span>());</span><br><span class=\"line\">        rt = QQuickRenderTarget::<span class=\"built_in\">fromPaintDevice</span>(&amp;bufferData-&gt;paintDevice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> ENABLE_VULKAN_RENDER</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">wlr_renderer_is_vk</span>(d-&gt;renderer-&gt;<span class=\"built_in\">handle</span>())) &#123;</span><br><span class=\"line\">        wlr_vk_image_attribs attribs;</span><br><span class=\"line\">        <span class=\"built_in\">wlr_vk_texture_get_image_attribs</span>(texture-&gt;<span class=\"built_in\">handle</span>(), &amp;attribs);</span><br><span class=\"line\">        rt = QQuickRenderTarget::<span class=\"built_in\">fromVulkanImage</span>(attribs.image, attribs.layout, attribs.format, d-&gt;size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">wlr_renderer_is_gles2</span>(d-&gt;renderer-&gt;<span class=\"built_in\">handle</span>())) &#123;</span><br><span class=\"line\">        wlr_gles2_texture_attribs attribs;</span><br><span class=\"line\">        <span class=\"built_in\">wlr_gles2_texture_get_attribs</span>(texture-&gt;<span class=\"built_in\">handle</span>(), &amp;attribs);</span><br><span class=\"line\"></span><br><span class=\"line\">        rt = QQuickRenderTarget::<span class=\"built_in\">fromOpenGLTexture</span>(attribs.tex, d-&gt;size);</span><br><span class=\"line\">        rt.<span class=\"built_in\">setMirrorVertically</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> texture;</span><br><span class=\"line\">    bufferData-&gt;renderTarget = rt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (QSGRendererInterface::<span class=\"built_in\">isApiRhiBased</span>(<span class=\"built_in\">getGraphicsApi</span>(rc))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt.<span class=\"built_in\">isNull</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Force convert to Rhi render target</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!d-&gt;<span class=\"built_in\">ensureRhiRenderTarget</span>(rc, bufferData.<span class=\"built_in\">get</span>()))</span><br><span class=\"line\">                bufferData-&gt;renderTarget = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bufferData-&gt;renderTarget.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(buffer, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">beforeDestroy</span>()),</span><br><span class=\"line\">            <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">onBufferDestroy</span>()), Qt::UniqueConnection);</span><br><span class=\"line\"></span><br><span class=\"line\">    d-&gt;buffers.<span class=\"built_in\">append</span>(bufferData.<span class=\"built_in\">release</span>());</span><br><span class=\"line\">    d-&gt;lastBuffer = d-&gt;buffers.<span class=\"built_in\">last</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d-&gt;buffers.<span class=\"built_in\">last</span>()-&gt;renderTarget;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>屏幕热插拔</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显示器插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WBackendPrivate::on_new_output</span><span class=\"params\">(QWOutput *output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> woutput = <span class=\"keyword\">new</span> <span class=\"built_in\">WOutput</span>(output, <span class=\"built_in\">q_func</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    outputList &lt;&lt; woutput;</span><br><span class=\"line\">    QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">addScreen</span>(woutput); <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\"></span><br><span class=\"line\">    woutput-&gt;<span class=\"built_in\">safeConnect</span>(&amp;QWOutput::beforeDestroy, <span class=\"built_in\">q_func</span>()-&gt;<span class=\"built_in\">server</span>(), [<span class=\"keyword\">this</span>, output] &#123;</span><br><span class=\"line\">        <span class=\"built_in\">on_output_destroy</span>(output);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">q_func</span>()-&gt;<span class=\"built_in\">outputAdded</span>(woutput);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示器拔出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WBackendPrivate::on_output_destroy</span><span class=\"params\">(QWOutput *output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; outputList.<span class=\"built_in\">count</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outputList.<span class=\"built_in\">at</span>(i)-&gt;<span class=\"built_in\">handle</span>() == output) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> device = outputList.<span class=\"built_in\">takeAt</span>(i);</span><br><span class=\"line\">            <span class=\"built_in\">q_func</span>()-&gt;<span class=\"built_in\">outputRemoved</span>(device);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> device;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WBackend::outputRemoved</span><span class=\"params\">(WOutput *output)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">removeScreen</span>(output); <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入设备热插拔</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入设备插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WSeatPrivate::attachInputDevice</span><span class=\"params\">(WInputDevice *device)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">W_Q</span>(WSeat);</span><br><span class=\"line\">    device-&gt;<span class=\"built_in\">setSeat</span>(q);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> qtDevice = QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">addInputDevice</span>(device, name);  <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(qtDevice);</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入设备拔出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">WSeatPrivate::detachInputDevice</span><span class=\"params\">(WInputDevice *device)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cursor &amp;&amp; device-&gt;<span class=\"built_in\">type</span>() == WInputDevice::Type::Pointer)</span><br><span class=\"line\">        cursor-&gt;<span class=\"built_in\">detachInputDevice</span>(device);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">bool</span> ok = QWlrootsIntegration::<span class=\"built_in\">instance</span>()-&gt;<span class=\"built_in\">removeInputDevice</span>(device); <span class=\"comment\">// 对接QPA</span></span><br><span class=\"line\">    <span class=\"built_in\">Q_ASSERT</span>(ok);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"treeland 事件分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## treeland 事件到客户端流程\n- libinput事件获取：\nlibinput是一个处理输入设备事件的库，用于从硬件设备（如键盘、鼠标、触摸板等）获取输入事件。\nwlroots使用libinput来初始化和管理这些设备，并通过libinput_dispatch函数来获取新的输入事件。\n\n- 事件处理：\nwlroots设置了一个libinput事件循环，在事件循环中调用libinput_dispatch以处理新到达的事件。\n当一个事件被获取时，wlroots会调用相应的回调函数，这些回调函数会处理具体类型的事件，如键盘事件（libinput_event_keyboard）、指针事件（libinput_event_pointer）等。\n\n- 输入设备管理：\nwlroots通过wlr_input_device结构体来表示输入设备。每个输入设备都有相应的事件处理函数。\n例如，wlr_keyboard处理键盘事件，wlr_pointer处理鼠标事件。\n\n- 事件分发：\ntreeland会将受到的键盘和鼠标事件经过Qt事件循环传递给wlr_seat。wlroots使用wlr_seat结构体来管理输入事件的分发，wlr_seat表示一个“座位”，即用户交互的一个上下文，它包含一个键盘、一个指针和一个触摸设备。会将事件分发到当前有焦点的Wayland客户端。焦点管理包括键盘焦点、指针焦点等。\n\n- 事件转换：\nwlroots会将这些事件转换为Wayland协议理解的事件。对于键盘事件，会生成wl_keyboard事件，对于指针事件，会生成wl_pointer事件。\n\n- 客户端通信：\nwlroots通过Wayland协议将事件发送给客户端。具体来说，通过wl_keyboard_send_key函数发送键盘事件，通过wl_pointer_send_motion、wl_pointer_send_button等函数发送指针事件。\n\n![1.1 鼠标事件流转图](/img/treeland/pointer-motion.drawio.svg)\n![1.2 键盘事件流转图](/img/treeland/keyboard_key.drawio.svg)\n","source":"_posts/event.md","raw":"---\ntitle: treeland 事件分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## treeland 事件到客户端流程\n- libinput事件获取：\nlibinput是一个处理输入设备事件的库，用于从硬件设备（如键盘、鼠标、触摸板等）获取输入事件。\nwlroots使用libinput来初始化和管理这些设备，并通过libinput_dispatch函数来获取新的输入事件。\n\n- 事件处理：\nwlroots设置了一个libinput事件循环，在事件循环中调用libinput_dispatch以处理新到达的事件。\n当一个事件被获取时，wlroots会调用相应的回调函数，这些回调函数会处理具体类型的事件，如键盘事件（libinput_event_keyboard）、指针事件（libinput_event_pointer）等。\n\n- 输入设备管理：\nwlroots通过wlr_input_device结构体来表示输入设备。每个输入设备都有相应的事件处理函数。\n例如，wlr_keyboard处理键盘事件，wlr_pointer处理鼠标事件。\n\n- 事件分发：\ntreeland会将受到的键盘和鼠标事件经过Qt事件循环传递给wlr_seat。wlroots使用wlr_seat结构体来管理输入事件的分发，wlr_seat表示一个“座位”，即用户交互的一个上下文，它包含一个键盘、一个指针和一个触摸设备。会将事件分发到当前有焦点的Wayland客户端。焦点管理包括键盘焦点、指针焦点等。\n\n- 事件转换：\nwlroots会将这些事件转换为Wayland协议理解的事件。对于键盘事件，会生成wl_keyboard事件，对于指针事件，会生成wl_pointer事件。\n\n- 客户端通信：\nwlroots通过Wayland协议将事件发送给客户端。具体来说，通过wl_keyboard_send_key函数发送键盘事件，通过wl_pointer_send_motion、wl_pointer_send_button等函数发送指针事件。\n\n![1.1 鼠标事件流转图](/img/treeland/pointer-motion.drawio.svg)\n![1.2 键盘事件流转图](/img/treeland/keyboard_key.drawio.svg)\n","slug":"event","published":1,"updated":"2024-06-25T12:26:04.182Z","_id":"clxucu1ii0003z9sbg6yv9pve","layout":"post","photos":[],"link":"","content":"<h2 id=\"treeland-事件到客户端流程\"><a href=\"#treeland-事件到客户端流程\" class=\"headerlink\" title=\"treeland 事件到客户端流程\"></a>treeland 事件到客户端流程</h2><ul>\n<li><p>libinput事件获取：<br>libinput是一个处理输入设备事件的库，用于从硬件设备（如键盘、鼠标、触摸板等）获取输入事件。<br>wlroots使用libinput来初始化和管理这些设备，并通过libinput_dispatch函数来获取新的输入事件。</p>\n</li>\n<li><p>事件处理：<br>wlroots设置了一个libinput事件循环，在事件循环中调用libinput_dispatch以处理新到达的事件。<br>当一个事件被获取时，wlroots会调用相应的回调函数，这些回调函数会处理具体类型的事件，如键盘事件（libinput_event_keyboard）、指针事件（libinput_event_pointer）等。</p>\n</li>\n<li><p>输入设备管理：<br>wlroots通过wlr_input_device结构体来表示输入设备。每个输入设备都有相应的事件处理函数。<br>例如，wlr_keyboard处理键盘事件，wlr_pointer处理鼠标事件。</p>\n</li>\n<li><p>事件分发：<br>treeland会将受到的键盘和鼠标事件经过Qt事件循环传递给wlr_seat。wlroots使用wlr_seat结构体来管理输入事件的分发，wlr_seat表示一个“座位”，即用户交互的一个上下文，它包含一个键盘、一个指针和一个触摸设备。会将事件分发到当前有焦点的Wayland客户端。焦点管理包括键盘焦点、指针焦点等。</p>\n</li>\n<li><p>事件转换：<br>wlroots会将这些事件转换为Wayland协议理解的事件。对于键盘事件，会生成wl_keyboard事件，对于指针事件，会生成wl_pointer事件。</p>\n</li>\n<li><p>客户端通信：<br>wlroots通过Wayland协议将事件发送给客户端。具体来说，通过wl_keyboard_send_key函数发送键盘事件，通过wl_pointer_send_motion、wl_pointer_send_button等函数发送指针事件。</p>\n</li>\n</ul>\n<p><img src=\"/img/treeland/pointer-motion.drawio.svg\" alt=\"1.1 鼠标事件流转图\"><br><img src=\"/img/treeland/keyboard_key.drawio.svg\" alt=\"1.2 键盘事件流转图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"treeland-事件到客户端流程\"><a href=\"#treeland-事件到客户端流程\" class=\"headerlink\" title=\"treeland 事件到客户端流程\"></a>treeland 事件到客户端流程</h2><ul>\n<li><p>libinput事件获取：<br>libinput是一个处理输入设备事件的库，用于从硬件设备（如键盘、鼠标、触摸板等）获取输入事件。<br>wlroots使用libinput来初始化和管理这些设备，并通过libinput_dispatch函数来获取新的输入事件。</p>\n</li>\n<li><p>事件处理：<br>wlroots设置了一个libinput事件循环，在事件循环中调用libinput_dispatch以处理新到达的事件。<br>当一个事件被获取时，wlroots会调用相应的回调函数，这些回调函数会处理具体类型的事件，如键盘事件（libinput_event_keyboard）、指针事件（libinput_event_pointer）等。</p>\n</li>\n<li><p>输入设备管理：<br>wlroots通过wlr_input_device结构体来表示输入设备。每个输入设备都有相应的事件处理函数。<br>例如，wlr_keyboard处理键盘事件，wlr_pointer处理鼠标事件。</p>\n</li>\n<li><p>事件分发：<br>treeland会将受到的键盘和鼠标事件经过Qt事件循环传递给wlr_seat。wlroots使用wlr_seat结构体来管理输入事件的分发，wlr_seat表示一个“座位”，即用户交互的一个上下文，它包含一个键盘、一个指针和一个触摸设备。会将事件分发到当前有焦点的Wayland客户端。焦点管理包括键盘焦点、指针焦点等。</p>\n</li>\n<li><p>事件转换：<br>wlroots会将这些事件转换为Wayland协议理解的事件。对于键盘事件，会生成wl_keyboard事件，对于指针事件，会生成wl_pointer事件。</p>\n</li>\n<li><p>客户端通信：<br>wlroots通过Wayland协议将事件发送给客户端。具体来说，通过wl_keyboard_send_key函数发送键盘事件，通过wl_pointer_send_motion、wl_pointer_send_button等函数发送指针事件。</p>\n</li>\n</ul>\n<p><img src=\"/img/treeland/pointer-motion.drawio.svg\" alt=\"1.1 鼠标事件流转图\"><br><img src=\"/img/treeland/keyboard_key.drawio.svg\" alt=\"1.2 键盘事件流转图\"></p>\n"},{"title":"treeland 显示器设备分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 显示器初始化及热插拔\n- 初始化与设置\n首先，wlroots 的 wlr_backend 和 wlr_output 模块需要初始化。wlr_backend 负责与底层硬件交互，而 wlr_output 则表示具体的显示输出（即显示器）。\n\n- 监控硬件事件\nwlroots 使用 udev 来监控硬件事件（包括显示器的插拔）。当有硬件事件发生时，wlroots 会通过 udev 提供的接口接收这些事件。\n\n- 事件处理\n当一个显示器插入或拔出时，wlroots 会触发相应的事件：new_output、destroy。treeland连接事件，处理QPA中存储的Screen数据，同步硬件动作信息，如下图1.1。\n\n![1.1 treeland显示器热插拔流程](/img/treeland/monitor-init-hotplug.drawio.svg)","source":"_posts/monitor-init-hotplug.md","raw":"---\ntitle: treeland 显示器设备分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 显示器初始化及热插拔\n- 初始化与设置\n首先，wlroots 的 wlr_backend 和 wlr_output 模块需要初始化。wlr_backend 负责与底层硬件交互，而 wlr_output 则表示具体的显示输出（即显示器）。\n\n- 监控硬件事件\nwlroots 使用 udev 来监控硬件事件（包括显示器的插拔）。当有硬件事件发生时，wlroots 会通过 udev 提供的接口接收这些事件。\n\n- 事件处理\n当一个显示器插入或拔出时，wlroots 会触发相应的事件：new_output、destroy。treeland连接事件，处理QPA中存储的Screen数据，同步硬件动作信息，如下图1.1。\n\n![1.1 treeland显示器热插拔流程](/img/treeland/monitor-init-hotplug.drawio.svg)","slug":"monitor-init-hotplug","published":1,"updated":"2024-06-25T12:42:35.478Z","_id":"clxudt5wi0000v8sb5lmi4m7v","layout":"post","photos":[],"link":"","content":"<h2 id=\"显示器初始化及热插拔\"><a href=\"#显示器初始化及热插拔\" class=\"headerlink\" title=\"显示器初始化及热插拔\"></a>显示器初始化及热插拔</h2><ul>\n<li><p>初始化与设置<br>首先，wlroots 的 wlr_backend 和 wlr_output 模块需要初始化。wlr_backend 负责与底层硬件交互，而 wlr_output 则表示具体的显示输出（即显示器）。</p>\n</li>\n<li><p>监控硬件事件<br>wlroots 使用 udev 来监控硬件事件（包括显示器的插拔）。当有硬件事件发生时，wlroots 会通过 udev 提供的接口接收这些事件。</p>\n</li>\n<li><p>事件处理<br>当一个显示器插入或拔出时，wlroots 会触发相应的事件：new_output、destroy。treeland连接事件，处理QPA中存储的Screen数据，同步硬件动作信息，如下图1.1。</p>\n</li>\n</ul>\n<p><img src=\"/img/treeland/monitor-init-hotplug.drawio.svg\" alt=\"1.1 treeland显示器热插拔流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"显示器初始化及热插拔\"><a href=\"#显示器初始化及热插拔\" class=\"headerlink\" title=\"显示器初始化及热插拔\"></a>显示器初始化及热插拔</h2><ul>\n<li><p>初始化与设置<br>首先，wlroots 的 wlr_backend 和 wlr_output 模块需要初始化。wlr_backend 负责与底层硬件交互，而 wlr_output 则表示具体的显示输出（即显示器）。</p>\n</li>\n<li><p>监控硬件事件<br>wlroots 使用 udev 来监控硬件事件（包括显示器的插拔）。当有硬件事件发生时，wlroots 会通过 udev 提供的接口接收这些事件。</p>\n</li>\n<li><p>事件处理<br>当一个显示器插入或拔出时，wlroots 会触发相应的事件：new_output、destroy。treeland连接事件，处理QPA中存储的Screen数据，同步硬件动作信息，如下图1.1。</p>\n</li>\n</ul>\n<p><img src=\"/img/treeland/monitor-init-hotplug.drawio.svg\" alt=\"1.1 treeland显示器热插拔流程\"></p>\n"},{"title":"treeland 输入设备分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n## 输入初始化及热插拔\n- 设备检测\nwlroots 使用 libinput 库来处理输入设备的检测。libinput 会在设备插入或移除时生成相应的事件。\n当一个新的输入设备插入时，libinput会生成一个LIBINPUT_EVENT_DEVICE_ADDED事件。\n当一个输入设备被移除时，libinput会生成一个LIBINPUT_EVENT_DEVICE_REMOVED事件。\n\n- 事件处理\nwlroots有一个事件循环，它会监听libinput生成的事件。当检测到设备添加或移除事件时，wlroots会调用相应的回调函数来处理这些事件，并且发送new_input、destory。\n\n- 设备添加流程\n在处理LIBINPUT_EVENT_DEVICE_ADDED事件时，wlroots会创建一个wlr_input_device结构来表示新插入的设备。然后，wlroots会将这个新的wlr_input_device添加到其内部管理的设备列表中。接着，wlroots会发送一个wlr_signal信号，通知其他可能依赖于输入设备的部分（如treeland）有新设备插入。treeland通过相关信号将设备对接到其上下文环境与QPA中。\n\n- 设备移除流程\n在处理LIBINPUT_EVENT_DEVICE_REMOVED事件时，wlroots会找到相应的wlr_input_device结构。然后，wlroots会从其内部管理的设备列表中移除这个设备。同样地，wlroots会发送一个wlr_signal信号，通知其他部分有设备被移除。treeland可以通过监听这些信号来更新其状态或进行相应的清理工作（例如，从输入处理链中移除设备，释放相关资源等）。\n\n![1.1 treeland输入设备热插拔流程](/img/treeland/input-device-init-hotplug.drawio.svg)","source":"_posts/inputdevice-init-hotplug.md","raw":"---\ntitle: treeland 输入设备分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n## 输入初始化及热插拔\n- 设备检测\nwlroots 使用 libinput 库来处理输入设备的检测。libinput 会在设备插入或移除时生成相应的事件。\n当一个新的输入设备插入时，libinput会生成一个LIBINPUT_EVENT_DEVICE_ADDED事件。\n当一个输入设备被移除时，libinput会生成一个LIBINPUT_EVENT_DEVICE_REMOVED事件。\n\n- 事件处理\nwlroots有一个事件循环，它会监听libinput生成的事件。当检测到设备添加或移除事件时，wlroots会调用相应的回调函数来处理这些事件，并且发送new_input、destory。\n\n- 设备添加流程\n在处理LIBINPUT_EVENT_DEVICE_ADDED事件时，wlroots会创建一个wlr_input_device结构来表示新插入的设备。然后，wlroots会将这个新的wlr_input_device添加到其内部管理的设备列表中。接着，wlroots会发送一个wlr_signal信号，通知其他可能依赖于输入设备的部分（如treeland）有新设备插入。treeland通过相关信号将设备对接到其上下文环境与QPA中。\n\n- 设备移除流程\n在处理LIBINPUT_EVENT_DEVICE_REMOVED事件时，wlroots会找到相应的wlr_input_device结构。然后，wlroots会从其内部管理的设备列表中移除这个设备。同样地，wlroots会发送一个wlr_signal信号，通知其他部分有设备被移除。treeland可以通过监听这些信号来更新其状态或进行相应的清理工作（例如，从输入处理链中移除设备，释放相关资源等）。\n\n![1.1 treeland输入设备热插拔流程](/img/treeland/input-device-init-hotplug.drawio.svg)","slug":"inputdevice-init-hotplug","published":1,"updated":"2024-06-25T13:27:07.049Z","_id":"clxuf91lp0000q5sb3qst2rhk","layout":"post","photos":[],"link":"","content":"<h2 id=\"输入初始化及热插拔\"><a href=\"#输入初始化及热插拔\" class=\"headerlink\" title=\"输入初始化及热插拔\"></a>输入初始化及热插拔</h2><ul>\n<li><p>设备检测<br>wlroots 使用 libinput 库来处理输入设备的检测。libinput 会在设备插入或移除时生成相应的事件。<br>当一个新的输入设备插入时，libinput会生成一个LIBINPUT_EVENT_DEVICE_ADDED事件。<br>当一个输入设备被移除时，libinput会生成一个LIBINPUT_EVENT_DEVICE_REMOVED事件。</p>\n</li>\n<li><p>事件处理<br>wlroots有一个事件循环，它会监听libinput生成的事件。当检测到设备添加或移除事件时，wlroots会调用相应的回调函数来处理这些事件，并且发送new_input、destory。</p>\n</li>\n<li><p>设备添加流程<br>在处理LIBINPUT_EVENT_DEVICE_ADDED事件时，wlroots会创建一个wlr_input_device结构来表示新插入的设备。然后，wlroots会将这个新的wlr_input_device添加到其内部管理的设备列表中。接着，wlroots会发送一个wlr_signal信号，通知其他可能依赖于输入设备的部分（如treeland）有新设备插入。treeland通过相关信号将设备对接到其上下文环境与QPA中。</p>\n</li>\n<li><p>设备移除流程<br>在处理LIBINPUT_EVENT_DEVICE_REMOVED事件时，wlroots会找到相应的wlr_input_device结构。然后，wlroots会从其内部管理的设备列表中移除这个设备。同样地，wlroots会发送一个wlr_signal信号，通知其他部分有设备被移除。treeland可以通过监听这些信号来更新其状态或进行相应的清理工作（例如，从输入处理链中移除设备，释放相关资源等）。</p>\n</li>\n</ul>\n<p><img src=\"/img/treeland/input-device-init-hotplug.drawio.svg\" alt=\"1.1 treeland输入设备热插拔流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"输入初始化及热插拔\"><a href=\"#输入初始化及热插拔\" class=\"headerlink\" title=\"输入初始化及热插拔\"></a>输入初始化及热插拔</h2><ul>\n<li><p>设备检测<br>wlroots 使用 libinput 库来处理输入设备的检测。libinput 会在设备插入或移除时生成相应的事件。<br>当一个新的输入设备插入时，libinput会生成一个LIBINPUT_EVENT_DEVICE_ADDED事件。<br>当一个输入设备被移除时，libinput会生成一个LIBINPUT_EVENT_DEVICE_REMOVED事件。</p>\n</li>\n<li><p>事件处理<br>wlroots有一个事件循环，它会监听libinput生成的事件。当检测到设备添加或移除事件时，wlroots会调用相应的回调函数来处理这些事件，并且发送new_input、destory。</p>\n</li>\n<li><p>设备添加流程<br>在处理LIBINPUT_EVENT_DEVICE_ADDED事件时，wlroots会创建一个wlr_input_device结构来表示新插入的设备。然后，wlroots会将这个新的wlr_input_device添加到其内部管理的设备列表中。接着，wlroots会发送一个wlr_signal信号，通知其他可能依赖于输入设备的部分（如treeland）有新设备插入。treeland通过相关信号将设备对接到其上下文环境与QPA中。</p>\n</li>\n<li><p>设备移除流程<br>在处理LIBINPUT_EVENT_DEVICE_REMOVED事件时，wlroots会找到相应的wlr_input_device结构。然后，wlroots会从其内部管理的设备列表中移除这个设备。同样地，wlroots会发送一个wlr_signal信号，通知其他部分有设备被移除。treeland可以通过监听这些信号来更新其状态或进行相应的清理工作（例如，从输入处理链中移除设备，释放相关资源等）。</p>\n</li>\n</ul>\n<p><img src=\"/img/treeland/input-device-init-hotplug.drawio.svg\" alt=\"1.1 treeland输入设备热插拔流程\"></p>\n"},{"title":"treeland 窗口初始化和更新分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n![1.1 treeland surface初始化流程](/img/treeland/surface-update.drawio.svg)\n\n![1.1 treeland surface更新流程](/img/treeland/surface-update.drawio.svg)\n","source":"_posts/surface-init-update.md","raw":"---\ntitle: treeland 窗口初始化和更新分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n![1.1 treeland surface初始化流程](/img/treeland/surface-update.drawio.svg)\n\n![1.1 treeland surface更新流程](/img/treeland/surface-update.drawio.svg)\n","slug":"surface-init-update","published":1,"updated":"2024-06-25T13:28:33.287Z","layout":"post","photos":[],"link":"","_id":"clxug03zy00006nsbgct08v5u","content":"<p><img src=\"/img/treeland/surface-update.drawio.svg\" alt=\"1.1 treeland surface初始化流程\"></p>\n<p><img src=\"/img/treeland/surface-update.drawio.svg\" alt=\"1.1 treeland surface更新流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/treeland/surface-update.drawio.svg\" alt=\"1.1 treeland surface初始化流程\"></p>\n<p><img src=\"/img/treeland/surface-update.drawio.svg\" alt=\"1.1 treeland surface更新流程\"></p>\n"},{"title":"treeland drm 送显分析","date":"2024-06-19T09:22:25.000Z","comments":1,"toc":true,"_content":"\n![1.1 treeland送显流程流程](/img/treeland/drm-commit.drawio.svg)","source":"_posts/drm-commit.md","raw":"---\ntitle: treeland drm 送显分析\ndate: 2024/06/19 17:22:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - treeland\n---\n\n![1.1 treeland送显流程流程](/img/treeland/drm-commit.drawio.svg)","slug":"drm-commit","published":1,"updated":"2024-06-25T13:29:42.626Z","_id":"clxug0ud000036nsb5m79hebt","layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/treeland/drm-commit.drawio.svg\" alt=\"1.1 treeland送显流程流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/treeland/drm-commit.drawio.svg\" alt=\"1.1 treeland送显流程流程\"></p>\n"},{"title":"wsm开发建议","date":"2024-06-23T08:07:25.000Z","comments":1,"toc":true,"_content":"\n## 笔者开发环境\n```shell\n操作系统： Arch Linux \nKDE Plasma 版本： 6.1.1\nKDE 程序框架版本： 6.3.0\nQt 版本： 6.7.2\n内核版本： 6.9.6-arch1-1 (64 位)\n图形平台： Wayland\n处理器： 12 × 12th Gen Intel® Core™ i7-1250U\n内存： 15.3 GiB 内存\n图形处理器： Mesa Intel® Graphics，Intel Corporation Alder Lake-UP4 GT2 [Iris Xe Graphics] (rev 0c)\n制造商： TIMI\n产品名称： Xiaomi Book Air 13 2022\n```\n&nbsp;&nbsp;&nbsp;&nbsp;笔者推荐使用Arch Linux + KDE Wayland桌面环境开发。\n\n## 硬件建议\n&nbsp;&nbsp;&nbsp;&nbsp;基于现有的 Linux 驱动现状，笔者推荐使用 X86 平台电脑设备进行开发，具体建议如下：\n- 使用 Intel 或 AMD 的 CPU 和 GPU 进行功能开发，这些硬件的驱动稳定且维护积极，适配 Linux 良好。\n- 不推荐使用闭源且维护不积极的 CPU 和 GPU 设备，这类硬件在开发过程中会带来诸多麻烦，且遇到问题时没有硬件厂商的支持，难以有效解决。\n- 对于喜欢折腾的同学，可以在英伟达、树莓派等驱动闭源设备上进行适配开发，建议联系相关技术人员提供技术支持。\n\n## 软件建议\n&nbsp;&nbsp;&nbsp;&nbsp;建议在Arch Linux或Ununtu-debian上开发，wsm 会紧跟 wlroots 的发展，需要系统保持最新，紧跟上游发展。\n\n## 核心要求列表\n- udev\n- libinput\n- OpenGL、Vulkan、Pixman\n- Mesa X11 and Wayland Platform（可选择屏蔽wsm Xwayland,即可去掉 X11 platform 必要支持）\n- linux-dma-buf（可选支持）\n- KMS、DRM\n\n对于X86电脑，以上基础要求都会满足，如果存在问题可联系笔者协助解决。非X86请联系硬件厂商。\n\n## 结语\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 将会以树莓派为最低硬件标准进行测试，当整个框架逐渐成熟时，笔者会考虑适配更多的硬件平台。","source":"_posts/wsm-dev-advice.md","raw":"---\ntitle: wsm开发建议\ndate: 2024/06/23 16:07:25\ncomments: true\ntoc: true\ntags:\n  - linux Desktop Environment\ncategories:\n  - wsm\n---\n\n## 笔者开发环境\n```shell\n操作系统： Arch Linux \nKDE Plasma 版本： 6.1.1\nKDE 程序框架版本： 6.3.0\nQt 版本： 6.7.2\n内核版本： 6.9.6-arch1-1 (64 位)\n图形平台： Wayland\n处理器： 12 × 12th Gen Intel® Core™ i7-1250U\n内存： 15.3 GiB 内存\n图形处理器： Mesa Intel® Graphics，Intel Corporation Alder Lake-UP4 GT2 [Iris Xe Graphics] (rev 0c)\n制造商： TIMI\n产品名称： Xiaomi Book Air 13 2022\n```\n&nbsp;&nbsp;&nbsp;&nbsp;笔者推荐使用Arch Linux + KDE Wayland桌面环境开发。\n\n## 硬件建议\n&nbsp;&nbsp;&nbsp;&nbsp;基于现有的 Linux 驱动现状，笔者推荐使用 X86 平台电脑设备进行开发，具体建议如下：\n- 使用 Intel 或 AMD 的 CPU 和 GPU 进行功能开发，这些硬件的驱动稳定且维护积极，适配 Linux 良好。\n- 不推荐使用闭源且维护不积极的 CPU 和 GPU 设备，这类硬件在开发过程中会带来诸多麻烦，且遇到问题时没有硬件厂商的支持，难以有效解决。\n- 对于喜欢折腾的同学，可以在英伟达、树莓派等驱动闭源设备上进行适配开发，建议联系相关技术人员提供技术支持。\n\n## 软件建议\n&nbsp;&nbsp;&nbsp;&nbsp;建议在Arch Linux或Ununtu-debian上开发，wsm 会紧跟 wlroots 的发展，需要系统保持最新，紧跟上游发展。\n\n## 核心要求列表\n- udev\n- libinput\n- OpenGL、Vulkan、Pixman\n- Mesa X11 and Wayland Platform（可选择屏蔽wsm Xwayland,即可去掉 X11 platform 必要支持）\n- linux-dma-buf（可选支持）\n- KMS、DRM\n\n对于X86电脑，以上基础要求都会满足，如果存在问题可联系笔者协助解决。非X86请联系硬件厂商。\n\n## 结语\n&nbsp;&nbsp;&nbsp;&nbsp;wsm 将会以树莓派为最低硬件标准进行测试，当整个框架逐渐成熟时，笔者会考虑适配更多的硬件平台。","slug":"wsm-dev-advice","published":1,"updated":"2024-06-29T08:25:56.741Z","_id":"clxzux9zr0000n2sbb6bodfxq","layout":"post","photos":[],"link":"","content":"<h2 id=\"笔者开发环境\"><a href=\"#笔者开发环境\" class=\"headerlink\" title=\"笔者开发环境\"></a>笔者开发环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统： Arch Linux </span><br><span class=\"line\">KDE Plasma 版本： 6.1.1</span><br><span class=\"line\">KDE 程序框架版本： 6.3.0</span><br><span class=\"line\">Qt 版本： 6.7.2</span><br><span class=\"line\">内核版本： 6.9.6-arch1-1 (64 位)</span><br><span class=\"line\">图形平台： Wayland</span><br><span class=\"line\">处理器： 12 × 12th Gen Intel® Core™ i7-1250U</span><br><span class=\"line\">内存： 15.3 GiB 内存</span><br><span class=\"line\">图形处理器： Mesa Intel® Graphics，Intel Corporation Alder Lake-UP4 GT2 [Iris Xe Graphics] (rev 0c)</span><br><span class=\"line\">制造商： TIMI</span><br><span class=\"line\">产品名称： Xiaomi Book Air 13 2022</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;笔者推荐使用Arch Linux + KDE Wayland桌面环境开发。</p>\n<h2 id=\"硬件建议\"><a href=\"#硬件建议\" class=\"headerlink\" title=\"硬件建议\"></a>硬件建议</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;基于现有的 Linux 驱动现状，笔者推荐使用 X86 平台电脑设备进行开发，具体建议如下：</p>\n<ul>\n<li>使用 Intel 或 AMD 的 CPU 和 GPU 进行功能开发，这些硬件的驱动稳定且维护积极，适配 Linux 良好。</li>\n<li>不推荐使用闭源且维护不积极的 CPU 和 GPU 设备，这类硬件在开发过程中会带来诸多麻烦，且遇到问题时没有硬件厂商的支持，难以有效解决。</li>\n<li>对于喜欢折腾的同学，可以在英伟达、树莓派等驱动闭源设备上进行适配开发，建议联系相关技术人员提供技术支持。</li>\n</ul>\n<h2 id=\"软件建议\"><a href=\"#软件建议\" class=\"headerlink\" title=\"软件建议\"></a>软件建议</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;建议在Arch Linux或Ununtu-debian上开发，wsm 会紧跟 wlroots 的发展，需要系统保持最新，紧跟上游发展。</p>\n<h2 id=\"核心要求列表\"><a href=\"#核心要求列表\" class=\"headerlink\" title=\"核心要求列表\"></a>核心要求列表</h2><ul>\n<li>udev</li>\n<li>libinput</li>\n<li>OpenGL、Vulkan、Pixman</li>\n<li>Mesa X11 and Wayland Platform（可选择屏蔽wsm Xwayland,即可去掉 X11 platform 必要支持）</li>\n<li>linux-dma-buf（可选支持）</li>\n<li>KMS、DRM</li>\n</ul>\n<p>对于X86电脑，以上基础要求都会满足，如果存在问题可联系笔者协助解决。非X86请联系硬件厂商。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 将会以树莓派为最低硬件标准进行测试，当整个框架逐渐成熟时，笔者会考虑适配更多的硬件平台。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"笔者开发环境\"><a href=\"#笔者开发环境\" class=\"headerlink\" title=\"笔者开发环境\"></a>笔者开发环境</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统： Arch Linux </span><br><span class=\"line\">KDE Plasma 版本： 6.1.1</span><br><span class=\"line\">KDE 程序框架版本： 6.3.0</span><br><span class=\"line\">Qt 版本： 6.7.2</span><br><span class=\"line\">内核版本： 6.9.6-arch1-1 (64 位)</span><br><span class=\"line\">图形平台： Wayland</span><br><span class=\"line\">处理器： 12 × 12th Gen Intel® Core™ i7-1250U</span><br><span class=\"line\">内存： 15.3 GiB 内存</span><br><span class=\"line\">图形处理器： Mesa Intel® Graphics，Intel Corporation Alder Lake-UP4 GT2 [Iris Xe Graphics] (rev 0c)</span><br><span class=\"line\">制造商： TIMI</span><br><span class=\"line\">产品名称： Xiaomi Book Air 13 2022</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;笔者推荐使用Arch Linux + KDE Wayland桌面环境开发。</p>\n<h2 id=\"硬件建议\"><a href=\"#硬件建议\" class=\"headerlink\" title=\"硬件建议\"></a>硬件建议</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;基于现有的 Linux 驱动现状，笔者推荐使用 X86 平台电脑设备进行开发，具体建议如下：</p>\n<ul>\n<li>使用 Intel 或 AMD 的 CPU 和 GPU 进行功能开发，这些硬件的驱动稳定且维护积极，适配 Linux 良好。</li>\n<li>不推荐使用闭源且维护不积极的 CPU 和 GPU 设备，这类硬件在开发过程中会带来诸多麻烦，且遇到问题时没有硬件厂商的支持，难以有效解决。</li>\n<li>对于喜欢折腾的同学，可以在英伟达、树莓派等驱动闭源设备上进行适配开发，建议联系相关技术人员提供技术支持。</li>\n</ul>\n<h2 id=\"软件建议\"><a href=\"#软件建议\" class=\"headerlink\" title=\"软件建议\"></a>软件建议</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;建议在Arch Linux或Ununtu-debian上开发，wsm 会紧跟 wlroots 的发展，需要系统保持最新，紧跟上游发展。</p>\n<h2 id=\"核心要求列表\"><a href=\"#核心要求列表\" class=\"headerlink\" title=\"核心要求列表\"></a>核心要求列表</h2><ul>\n<li>udev</li>\n<li>libinput</li>\n<li>OpenGL、Vulkan、Pixman</li>\n<li>Mesa X11 and Wayland Platform（可选择屏蔽wsm Xwayland,即可去掉 X11 platform 必要支持）</li>\n<li>linux-dma-buf（可选支持）</li>\n<li>KMS、DRM</li>\n</ul>\n<p>对于X86电脑，以上基础要求都会满足，如果存在问题可联系笔者协助解决。非X86请联系硬件厂商。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;wsm 将会以树莓派为最低硬件标准进行测试，当整个框架逐渐成熟时，笔者会考虑适配更多的硬件平台。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clxt4rbu30000yjsb5ru1hj9x","category_id":"clxt4rbu70001yjsbdg4ucur1","_id":"clxt4rbu80003yjsb13r52ckt"},{"post_id":"clxtz99e6000nm5sb93zo7k01","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxtz99e80013m5sbb82la422"},{"post_id":"clxtz99e7000qm5sbeur96ae0","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxtz99e80014m5sb0v6h8kmw"},{"post_id":"clxtz99e7000wm5sb3ejd4tvo","category_id":"clxtz99e80010m5sb16t587km","_id":"clxtz99e80016m5sb4psb9qvo"},{"post_id":"clxtzgw7l0000q9sb2qrraumv","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxtzgw7n0002q9sbdi4yhg2n"},{"post_id":"clxtzi5as00006esb4cgxb5g9","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxtzi5au00026esb5mds0dui"},{"post_id":"clxtztloz0000lksbgxnb18td","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxtztlp20002lksb7lw010nx"},{"post_id":"clxubzzkk0000zosbfvzsaksd","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxubzzkp0002zosb7avqatek"},{"post_id":"clxucu1ii0003z9sbg6yv9pve","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxucu1ik0005z9sbh9e37vrd"},{"post_id":"clxudt5wi0000v8sb5lmi4m7v","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxudt5wm0002v8sb1wa0gyck"},{"post_id":"clxuf91lp0000q5sb3qst2rhk","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxuf91lu0002q5sb20hf3iyo"},{"post_id":"clxug03zy00006nsbgct08v5u","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxug040300026nsbgbk19ob4"},{"post_id":"clxug0ud000036nsb5m79hebt","category_id":"clxtz99e10002m5sba4ibdig2","_id":"clxug0ud400056nsbed1s24rr"},{"post_id":"clxzux9zr0000n2sbb6bodfxq","category_id":"clxt4rbu70001yjsbdg4ucur1","_id":"clxzux9zw0002n2sb3fwrfcos"}],"PostTag":[{"post_id":"clxt4rbu30000yjsb5ru1hj9x","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxt4rbu80002yjsbhdpw5n08"},{"post_id":"clxtz99e6000nm5sb93zo7k01","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxtz99e7000sm5sb7n785lsh"},{"post_id":"clxtz99e7000qm5sbeur96ae0","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxtz99e7000vm5sb0kbphdtm"},{"post_id":"clxtz99e7000wm5sb3ejd4tvo","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxtz99e80011m5sb31nlhp8w"},{"post_id":"clxtzgw7l0000q9sb2qrraumv","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxtzgw7n0001q9sbbp4ygmsm"},{"post_id":"clxtzi5as00006esb4cgxb5g9","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxtzi5au00016esbhqn01xza"},{"post_id":"clxtztloz0000lksbgxnb18td","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxtztlp20001lksbc5358zmv"},{"post_id":"clxubzzkk0000zosbfvzsaksd","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxubzzko0001zosbckh182b8"},{"post_id":"clxucu1ii0003z9sbg6yv9pve","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxucu1ij0004z9sb6jf3a9g3"},{"post_id":"clxudt5wi0000v8sb5lmi4m7v","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxudt5wm0001v8sbbm07648v"},{"post_id":"clxuf91lp0000q5sb3qst2rhk","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxuf91lt0001q5sb5mg7b4p2"},{"post_id":"clxug03zy00006nsbgct08v5u","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxug040300016nsbdwoy3rfb"},{"post_id":"clxug0ud000036nsb5m79hebt","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxug0ud300046nsbb7gwe3c8"},{"post_id":"clxzux9zr0000n2sbb6bodfxq","tag_id":"clkmsdt5c0004ezsbdshwfib3","_id":"clxzux9zv0001n2sb4chv5l6y"}],"Tag":[{"name":"linux Desktop Environment","_id":"clkmsdt5c0004ezsbdshwfib3"},{"name":"linux xdg","_id":"clkmsdt5e0006ezsbd279c5ny"}]}}